<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-03-13T12:23:22.748Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[理查德・塔尔斯 | TypeScript 技术面试]]></title>
        <id>https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html</id>
        <link href="https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html"/>
        <updated>2023-03-13T12:20:09.749Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html">Richard Towers | Typescripting the technical interview</a></p><p><strong>概要：</strong></p><p>这篇文章是一篇以 Aphyr 的 Typing the technical interview 为蓝本的技术面试题解析。在这个故事中，主人公接受了一个 N-Queens 编程问题的挑战，并通过 TypeScript 实现了一个解决方案。文章通过描述主人公与面试官 Criss 的对话，展示了如何使用 TypeScript 来解决编程问题。整个过程充满了符号、神秘和幽默感。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么前端世界忽略了 Web 组件・保罗・阿姆斯特朗]]></title>
        <id>https://paularmstrong.dev/blog/2023/03/13/why-we-do-not-write-web-components/</id>
        <link href="https://paularmstrong.dev/blog/2023/03/13/why-we-do-not-write-web-components/"/>
        <updated>2023-03-13T12:17:44.062Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://paularmstrong.dev/blog/2023/03/13/why-we-do-not-write-web-components/">Why the frontend world ignores Web Components • Paul Armstrong</a></p><p><strong>概要：</strong></p><p>Web Components 一直被认为是为浏览器而非开发人员设计的，因此前端开发人员更倾向于使用 React、Angular、Vue 等框架。Web Components 存在测试性、缺乏统一框架、跨组件状态管理和三种语言等问题，这些都使得它们难以维护且不易上手。此外，Web Components 在文档和教程方面也存在不足，使得开发人员难以快速掌握其使用方法。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hooks 是一个错误吗？| jakelazaroff.com]]></title>
        <id>https://jakelazaroff.com/words/were-react-hooks-a-mistake/</id>
        <link href="https://jakelazaroff.com/words/were-react-hooks-a-mistake/"/>
        <updated>2023-03-13T12:16:56.889Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://jakelazaroff.com/words/were-react-hooks-a-mistake/">Were React Hooks a Mistake? | jakelazaroff.com</a></p><p><strong>概要：</strong></p><p>本文探讨了 React 编程模型的不同之处，以及为什么有些人更喜欢使用 signal-based components。作者认为，人们对组件的心理模型与 React 中的函数组件和 hooks 的工作方式不匹配。与类组件相比，signal-based components 更加相似。文章还介绍了 Solid 等信号驱动框架，并讨论了它们与 React hooks 之间的区别和权衡。最后，作者总结说，现在的框架似乎正在尝试在 hooks 的可组合性和类的稳定性之间取得平衡。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Remotion Blog - 在 React 中优雅地管理状态和渲染]]></title>
        <id>https://remotion.com/blog/untangling-state-in-react</id>
        <link href="https://remotion.com/blog/untangling-state-in-react"/>
        <updated>2023-03-13T12:16:19.910Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://remotion.com/blog/untangling-state-in-react">Remotion Blog – Elegantly managing state and renders in React</a></p><p><strong>概要：</strong></p><p>本文介绍了在 React 中简化状态管理的方法。作者指出，React 状态更像是时间快照而不是常规 JavaScript 变量。设置状态只会在下一次渲染时更改它。React 批处理状态更新，并且仅在调用事件处理程序中的所有代码后才进行呈现。文章还介绍了 useState 钩子的作用和使用方法，以及如何通过传递更新程序函数来解决 React 队列状态更改更新的问题。最后，作者建议读者查阅 React 官方文档以了解更多信息。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 React Query 防抖请求]]></title>
        <id>https://rafaelcamargo.com/blog/deboucing-requests-with-react-query/</id>
        <link href="https://rafaelcamargo.com/blog/deboucing-requests-with-react-query/"/>
        <updated>2023-03-13T12:16:06.389Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://rafaelcamargo.com/blog/deboucing-requests-with-react-query/">Debouncing requests with React Query</a></p><p><strong>概要：</strong></p><p>本文介绍了 React Query 库的一些优势，如默认防止对同一资源的同时请求，并能够像传递简单参数一样轻松地缓存响应。然而，该库不提供反弹功能，因此需要将其包装在一个简单的抽象中，以满足这种需求。作者提出了一种方法来扩展 React Query 以添加新功能，代码行数少于 40 行。通过动画演示，展示了反弹的实际效果，使用反弹后，应用程序只触发了 1 个请求并交换了 294 B 的数据，请求减少了 91％，传输的数据减少了 99％。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[主题切换]]></title>
        <id>https://toggles.dev/</id>
        <link href="https://toggles.dev/"/>
        <updated>2023-03-13T12:14:32.521Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://toggles.dev/">Theme Toggles</a></p><p><strong>概要：</strong></p><p>Theme Toggles 是一款易于使用的动画切换集合，旨在切换浅色和深色模式。它是一个模块化库，旨在提供足够的自定义功能。它与 Tailwindcss 等实用 CSS 框架非常配合使用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[零努力类型安全]]></title>
        <id>https://svelte.dev/blog/zero-config-type-safety</id>
        <link href="https://svelte.dev/blog/zero-config-type-safety"/>
        <updated>2023-03-13T12:08:39.558Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://svelte.dev/blog/zero-config-type-safety">Zero-effort type safety</a></p><p><strong>概要：</strong></p><p>SvelteKit 现在可以自动生成类型注释，无需手动添加。通过在 SvelteKit 应用程序中添加类型注释，可以实现网络全面的类型安全性。现在，SvelteKit 框架可以为我们类型化 load 和 data，这是计算机所擅长的 —— 让我们专注于创造性的工作。使用 VSCode 的用户只需升级到最新版本的 Svelte 扩展即可，其他编辑器的扩展也可以使用此功能，只要它们支持 Language Server Protocol 和 TypeScript 插件。此外，该功能还与最新版本的 CLI 诊断工具 svelte-check 兼容。这项功能需要对语言服务器和 TypeScript 插件进行更改，以便在正确的位置自动插入正确的类型，并告诉 TypeScript 使用我们的虚拟增强文件而不是原始未经过类型化的文件。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT-4 将于下周推出，微软德国表示它将是多模态的。]]></title>
        <id>https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html</id>
        <link href="https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html"/>
        <updated>2023-03-10T09:23:26.503Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html">GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany</a></p><p><strong>概要：</strong></p><p>Microsoft Germany has announced that it will introduce GPT-4 next week. The announcement was made during a hybrid information event entitled "AI in Focus - Digital Kickoff". Andreas Braun, CTO Microsoft Germany and Lead Data & AI STU, called LLM a "game changer" because they teach machines to understand natural language. The technology has come so far that it basically "works in all languages". Marianne Janik, CEO of Microsoft Germany, spoke across the board about disruption through AI in companies. Disruption does not necessarily mean job losses. It will take "many experts to make the use of AI value-adding", Janik emphasised. Clemens Sieber, Senior AI Specialist, provided insights into practical AI use and concrete use cases that their teams are currently working on, but also into technical backgrounds.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WTF 是代码提取？]]></title>
        <id>https://www.builder.io/blog/wtf-is-code-extraction</id>
        <link href="https://www.builder.io/blog/wtf-is-code-extraction"/>
        <updated>2023-03-09T09:45:53.821Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.builder.io/blog/wtf-is-code-extraction">WTF Is Code Extraction</a></p><p><strong>概要：</strong></p><p>本文介绍了一种新的开发方式 —— 代码共存（code collocation），即将服务器端和客户端代码放在同一个文件中。作者认为这种方式可以提高开发效率，因为大部分代码都在两个位置上运行，没有必要将它们分开成不同的文件。然而，由于服务器端和客户端有不同的限制，需要将它们分开并创建代码包。文章介绍了三种策略：导出抽取、函数抽取和闭包抽取，并详细解释了如何使用这些策略来实现代码共存。最后，作者还介绍了一种称为 “标记函数” 的方法，可以让开发者自定义标记以及相应的转换过程。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is the most important thing for an engineer to achieve in their growth journey? 

工程师在成长过程中最重要的是什么？]]></title>
        <id>https://chinese.catchen.me/2023/02/engineer-career-growth-endgame.html</id>
        <link href="https://chinese.catchen.me/2023/02/engineer-career-growth-endgame.html"/>
        <updated>2023-03-09T04:58:28.196Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://chinese.catchen.me/2023/02/engineer-career-growth-endgame.html">工程师成长到最后最重要的是什么？</a></p><p><strong>概要：</strong></p><p>本文讨论了工程师成长到最后，最重要的是什么。作者认为，显性知识可以通过书本或其他媒体学习，而隐性知识则是那些难以言述的知识，只能通过找到擅长某一领域的人进行反馈和训练来获得。因此，当工程师成长到一定阶段时，需要搞明白自己需要什么并找到能够提供有效训练的人。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PaLM-E：一种具有身体多模态的语言模型]]></title>
        <id>https://palm-e.github.io/</id>
        <link href="https://palm-e.github.io/"/>
        <updated>2023-03-08T04:25:27.547Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://palm-e.github.io/">PaLM-E: An Embodied Multimodal Language Model</a></p><p><strong>概要：</strong></p><p>本文介绍了一种新的语言模型 ——PaLM-E，它将真实世界的连续传感器模态直接纳入语言模型中，从而建立单词和感知之间的联系。PaLM-E 的输入是交错的多模态句子，包括视觉、连续状态估计和文本输入编码。我们与预训练的大型语言模型一起，对这些编码进行端到端训练，用于多个具体化任务，包括序列机器人操作规划、视觉问答和字幕制作。评估表明，PaLM-E 可以解决各种具体化推理任务，从不同的观察模态、多个具体化形式中获得积极转移，并保留通用语言能力。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么 Turborepo 从 Go 迁移到 Rust - Vercel]]></title>
        <id>https://vercel.com/blog/turborepo-migration-go-rust</id>
        <link href="https://vercel.com/blog/turborepo-migration-go-rust"/>
        <updated>2023-03-08T00:38:52.418Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://vercel.com/blog/turborepo-migration-go-rust">Why Turborepo is migrating from Go to Rust – Vercel</a></p><p><strong>概要：</strong></p><p>Turborepo 是一个用于 JavaScript 和 TypeScript 代码库的高性能构建系统。该系统通过增量构建、并行执行和远程缓存来避免重复工作。随着使用量的增加和产品需求的变化，Turborepo 决定从 Go 逐步迁移到 Rust。该迁移主要基于 Rust 的正确性、强大的生态系统以及开发人员的愉悦度等因素。Turborepo 正在采取渐进式的迁移方式，目前已经实现了 “Rust-Go-Rust Sandwich” 的状态，即 Rust 是入口点，可以选择使用 Rust 或 Go 来实现特定命令的功能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[框架定义的基础设施 - Vercel]]></title>
        <id>https://vercel.com/blog/framework-defined-infrastructure</id>
        <link href="https://vercel.com/blog/framework-defined-infrastructure"/>
        <updated>2023-03-08T00:38:30.242Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://vercel.com/blog/framework-defined-infrastructure">Framework-defined infrastructure – Vercel</a></p><p><strong>概要：</strong></p><p>框架定义的基础设施（FdI）是基础设施即代码（IaC）的演变，它自动提供源自框架和写在其中的应用程序的基础设施。FdI使用构建时的程序来解析写给框架的源代码，理解代码背后的意图，然后生成运行软件所需的IaC配置。这就通过真正的无服务器架构实现了更可预测、成本更低、风险更小的DevOps。FdI对服务器、消息队列和无服务器功能等云基元进行了抽象，使其成为框架概念的单纯实现细节。它提供了不同目标基础设施供应商之间的可移植性，消除了在生产中运行应用程序的基础设施的手动配置需求，并对预先审查的安全服务进行了标准化。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apple: M2 Eaten Dust for Security | Programmer's Cat]]></title>
        <id>https://catcoding.me/p/apple-perf/</id>
        <link href="https://catcoding.me/p/apple-perf/"/>
        <updated>2023-03-07T06:58:22.093Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://catcoding.me/p/apple-perf/">苹果：为了安全让 M2 吃灰 | 程序员的喵</a></p><p><strong>概要：</strong></p><p>该文章介绍了作者在使用苹果 M2 Pro 电脑时发现的一个让人大跌眼镜的设计：系统在运行任何软件之前都会进行校验和检查，以确保其不是恶意软件。这个过程需要通过网络请求与苹果服务器通信，导致性能下降。作者在编译 Rust 编译器项目时发现，相同测试用例的 Linux 虚拟机只需要 1.5 分钟，而 M2 Pro 需要 16 分钟。经过调查，作者发现关闭 System Integrity Protection（SIP）可以显著提高性能，但苹果回应称这是 “设计使然”。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如果我明天去世了，我的网络应用程序会持续多久？]]></title>
        <id>https://casparwre.de/blog/webapp-afterlife/</id>
        <link href="https://casparwre.de/blog/webapp-afterlife/"/>
        <updated>2023-03-07T04:19:32.094Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://casparwre.de/blog/webapp-afterlife/">If I died tomorrow, how long would my webapp keep running?</a></p><p><strong>概要：</strong></p><p>一位名为 “Hacker News” 的开发人员在其博客上分享了一个问题：如果他突然去世，他的 Web 应用程序会运行多久？他估计，只要数据库、域和云服务继续运作，该应用程序将无限期在线。但是，他也考虑到了可能导致应用程序离线的几种情况，例如自然灾害、基础设施故障、技术故障、产品故障、安全漏洞或恶意攻击以及付款故障。最后，他认为最有可能导致应用程序离线的是付款故障。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[沙虫审计]]></title>
        <id>https://docs.sandworm.dev/</id>
        <link href="https://docs.sandworm.dev/"/>
        <updated>2023-03-07T04:18:38.995Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://docs.sandworm.dev/">Sandworm Audit</a></p><p><strong>概要：</strong></p><p>Sandworm 是一个免费的开源命令行工具，可帮助 JavaScript 开发人员扫描项目和依赖项中的漏洞、许可证和其他问题。它支持自定义许可证策略，并提供 JSON 问题和许可证使用报告以及易于理解的 SVG 依赖树和树状图形可视化。此外，它还可以覆盖安全漏洞和包许可证信息，并生成所有依赖项和许可证信息的 CSV 文件。用户可以在终端中运行 Sandworm Audit 作为命令行工具，或者使用.sandworm.config.json 配置文件进行配置。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何为你完全不了解的项目做出贡献？]]></title>
        <id>https://grifel.dev/how-to-contribute-without-knowledge</id>
        <link href="https://grifel.dev/how-to-contribute-without-knowledge"/>
        <updated>2023-03-07T04:16:38.129Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://grifel.dev/how-to-contribute-without-knowledge">How to contribute to a project you have no idea about</a></p><p><strong>概要：</strong></p><p>本文介绍了一个名为 Bun 的 JavaScript/TypeScript 运行时，它与 Deno/Node 类似，但具有更快的启动时间。作者通过编写测试套件来测试 Bun 的性能，并在测试过程中遇到了问题。作者分享了自己处理问题的方法，包括询问前任维护者、规范功能 / 问题、运行测试、编写测试用例并更改代码等步骤。最后，作者强调了测试套件的重要性，特别是在开源项目中，因为测试套件可以降低进入门槛，使得更多人可以参与项目。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[比 Vite 快 5 倍？2ms HMR？Farm：基于 Rust 的极速构建引擎！]]></title>
        <id>https://zhuanlan.zhihu.com/p/611603260</id>
        <link href="https://zhuanlan.zhihu.com/p/611603260"/>
        <updated>2023-03-07T00:53:35.167Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/611603260">比 Vite 快 5 倍? 2ms HMR？Farm：基于 Rust 的极速构建引擎！</a></p><p><strong>概要：</strong></p><p>Farm 是一个使用 Rust 编写的构建引擎，比 Webpack 快 10 倍以上，比 Vite 快 5 倍。它支持 Html、Css、Js、Jsx、Ts、Tsx、静态资源等模块的编译能力，并且采用按需编译，在加载时编译除首屏需要的模块外的其他模块，理论上对任意规模的项目都能支持秒启动。所有能力都由插件实现，支持 Rust 和 Js 插件。Farm 在开发环境和生产环境下的编译行为保持一致，同时自动根据依赖关系、资源大小等因素将项目拆分成小 bundle，解决了 bundle 模式的缓存命中问题以及 unbundle 模式的请求数量问题。目前 Farm 已经更新到 0.3 版本，但生产环境优化还在开发中，所以请谨慎使用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React 初学者常见错误]]></title>
        <id>https://www.joshwcomeau.com/react/common-beginner-mistakes/</id>
        <link href="https://www.joshwcomeau.com/react/common-beginner-mistakes/"/>
        <updated>2023-03-07T00:46:48.674Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.joshwcomeau.com/react/common-beginner-mistakes/">Common Beginner Mistakes with React</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 React 开发中常见的 9 种陷阱，包括：使用零进行条件判断、直接修改状态、未生成 key、缺少空格、在更改状态后访问它、返回多个元素、从不受控制到受控制的转换、缺少样式括号和异步效果函数。对于每种陷阱，文章都提供了解决方法，并给出了示例代码。此外，作者还介绍了他正在开发的在线课程 The Joy of React，旨在帮助人们建立自己的 React 直觉。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[@githubnext/github-copilot-cli

请注意，这是一个英文文本，无法直接翻译为中文。如果您需要更多帮助，请提供更多上下文或详细信息。]]></title>
        <id>https://www.npmjs.com/package/@githubnext/github-copilot-cli#whats-the-point-of-the-eval-and-alias-stuff</id>
        <link href="https://www.npmjs.com/package/@githubnext/github-copilot-cli#whats-the-point-of-the-eval-and-alias-stuff"/>
        <updated>2023-03-07T00:46:09.662Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.npmjs.com/package/@githubnext/github-copilot-cli#whats-the-point-of-the-eval-and-alias-stuff">@githubnext/github-copilot-cli</a></p><p><strong>概要：</strong></p><p>GitHub Copilot CLI 是一个命令行体验，可以让 GitHub Copilot 在命令行中帮助你。它将自然语言转换为 shell 命令，并具有不同领域的模式。安装后，您可以使用以下三个命令：??：将自然语言翻译为任意 shell 命令；git?：将自然语言翻译为 Git 命令；gh?：将自然语言翻译为 GitHub CLI 命令。GitHub Copilot CLI 还会尝试逐步分解并解释建议的命令将做什么。要使用 GitHub Copilot CLI，您必须拥有对 GitHub Copilot 的访问权限。支持的平台包括 Linux 上的 zsh 等，但可能会向您建议在您的平台或终端上无法运行的命令。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 tRPC 和 React 的全栈 TypeScript]]></title>
        <id>https://www.robinwieruch.de/react-trpc/</id>
        <link href="https://www.robinwieruch.de/react-trpc/"/>
        <updated>2023-03-06T14:43:59.460Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.robinwieruch.de/react-trpc/">Full-Stack TypeScript with tRPC and React</a></p><p><strong>概要：</strong></p><p>tRPC 是一种使用 TypeScript 在全栈应用程序中创建完全类型安全 API 的方法。 tRPC 服务器应用程序生成具有类型安全函数的类型安全路由器（例如 CRUD 操作：创建用户，按标识符获取用户，获取所有用户），客户端应用程序可以直接调用这些函数。 在幕后，仍然使用 HTTP 在客户端和服务器之间通信。相比 GraphQL 和 REST，tRPC 主要用于较小的项目，其中不需要协调许多服务（例如 GraphQL），或者我们不一定按照标准化的 RESTful 方法工作。但是，随时可以从 tRPC 迁移到 GraphQL / REST，因为 tRPC 最终只是服务器上的函数，可以直接在 REST 路由器或 GraphQL 解析器中使用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Oxy 是 Cloudflare 基于 Rust 的下一代代理框架。]]></title>
        <id>https://blog.cloudflare.com/introducing-oxy/</id>
        <link href="https://blog.cloudflare.com/introducing-oxy/"/>
        <updated>2023-03-06T06:19:45.974Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.cloudflare.com/introducing-oxy/">Oxy is Cloudflare's Rust-based next generation proxy framework</a></p><p><strong>概要：</strong></p><p>Oxy 是一款使用 Rust 编程语言开发的现代代理框架，是 Cloudflare 项目的基础之一，包括 Zero Trust Gateway、iCloud Private Relay 第二跳代理和内部出口路由服务。Oxy 利用了 Cloudflare 多年构建高负载代理的经验，实现了最新的通信协议，可以轻松构建可容纳大量每日流量的复杂服务。Oxy 支持多种通信协议，包括 HTTP 1/2/3、TCP 和 UDP 流量等，可以在 OSI 模型的多个层次上分析和操作流量。同时，它还支持 TLS 加密和安全认证，并提供全面的监控和分析功能。Oxy 的设计符合 Cloudflare 的迭代式开发方法，可以根据应用程序要求进行定制，允许工程师调整每个组件。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我喜欢用 Rust 来创业。但我不会再选择它了。]]></title>
        <id>https://www.propelauth.com/post/i-love-building-a-startup-in-rust-i-wouldnt-pick-it-again</id>
        <link href="https://www.propelauth.com/post/i-love-building-a-startup-in-rust-i-wouldnt-pick-it-again"/>
        <updated>2023-03-06T04:46:28.915Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.propelauth.com/post/i-love-building-a-startup-in-rust-i-wouldnt-pick-it-again">I love building a startup in Rust. I wouldn't pick it again.</a></p><p><strong>概要：</strong></p><p>该文章介绍了一家初创公司在选择编程语言时的经验教训。作者表示，尽管他非常喜欢 Rust 语言，但如果重新开始，他不会再次选择它。作者解释了他们最初选择 Rust 的原因，包括安全性和代码可读性等方面。然而，作者认为，在初创阶段，快速迭代比构建高效的代码更为重要。此外，对于不熟悉 Rust 的新员工来说，学习曲线也较陡峭。作者建议，在确定产品方向并需要构建高性能系统时，再考虑使用 Rust 语言。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[优秀工程师和卓越工程师的区别]]></title>
        <id>https://www.intercom.com/blog/traits-of-exceptional-engineers/</id>
        <link href="https://www.intercom.com/blog/traits-of-exceptional-engineers/"/>
        <updated>2023-03-06T04:44:50.950Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.intercom.com/blog/traits-of-exceptional-engineers/">The difference between good and great engineers</a></p><p><strong>概要：</strong></p><p>Intercom's former Senior Director of Demand Generation, Brian Kotlyar, has outlined six traits that make exceptional engineers. These include ambition and determination, habitual simplification, the ability to debug anything quickly, a willingness to help others be great, knowing what is valuable, and being creative and positive. Kotlyar said engineering culture is shaped by the people hired, the actions they take, and the traits that are rewarded and celebrated.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[36 种不同的生活方式]]></title>
        <id>https://chrisguillebeau.com/36-ways</id>
        <link href="https://chrisguillebeau.com/36-ways"/>
        <updated>2023-03-06T04:43:13.118Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://chrisguillebeau.com/36-ways">36 Ways to Live Differently</a></p><p><strong>概要：</strong></p><p>这篇文章提供了一些方法，可以让你生活得更好。通过不断接触新的思想和实践，你可以学会不同的思考方式和生活方式。文章列举了一系列方法，包括认识到生活中的隐含规则、学会记笔记、思考与自己观点相反的政治党派或宗教信仰等等。此外，文章还提醒读者要注意身体感受，避免比较、远离负面人物、保持乐观等等。最后，作者强调了三个重要的方面：学习、行动和善良。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 React-Spring 创建动画：全面指南]]></title>
        <id>https://voskan.host/2023/02/08/creating-animations-in-react-with-react-spring/</id>
        <link href="https://voskan.host/2023/02/08/creating-animations-in-react-with-react-spring/"/>
        <updated>2023-03-06T04:40:36.350Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://voskan.host/2023/02/08/creating-animations-in-react-with-react-spring/">Creating Animations in React with React-Spring: A Comprehensive Guide</a></p><p><strong>概要：</strong></p><p>本文介绍了如何在 React 中实现动画效果。作者介绍了 React-Spring 这个流行的 JavaScript 库，它提供了一组强大的钩子，可以用于向组件添加动画效果。文章详细介绍了如何安装和使用 React-Spring，并提供了许多示例代码来展示如何创建简单的淡入淡出和滑动动画，以及更复杂的动画效果，如关键帧和动画序列。最后，作者总结了使用 React-Spring 的好处，包括简化的 API、React Native 支持、良好的性能和互动性等，并推荐开发人员通过探索 React-Spring 文档并尝试本文介绍的示例来学习如何使用该库创建动画效果。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[停止使用 “技术债务” 的说法。]]></title>
        <id>https://stackoverflow.blog/2023/02/27/stop-saying-technical-debt/</id>
        <link href="https://stackoverflow.blog/2023/02/27/stop-saying-technical-debt/"/>
        <updated>2023-03-05T12:53:44.743Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://stackoverflow.blog/2023/02/27/stop-saying-technical-debt/">Stop saying “technical debt”</a></p><p><strong>概要：</strong></p><p>开发团队常常陷入技术债务的泥潭，每次发布新功能都会遇到各种问题。但是，这种情况往往是我们自己给自己挖的坑。我们试图通过使用 “技术债务” 这个词来让商业人士、设计师、产品经理和工程师达成共识，但这个词在不同人看来意义不同，导致沟通困难。如果我们将技术债务等同于糟糕的代码，就会误以为前任开发人员干得不好，而实际上可能是有某些限制。我们应该选择一些可衡量的指标来评估系统的质量，如维护负荷。我们可以跟非工程团队的人谈论这个数字，让他们帮助我们减少维护负荷。为了最小化维护负荷的增长，我们需要进行良好的代码管理，包括记录系统、从代码中恢复上下文和为未来的更改进行设计。如果我们能够在保持日常代码管理例程的同时，跟踪维护任务的来源并解决这些问题，那么我们就可以实现负载增长为负数，即代码随时间变得更易于维护。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在 Node.js 中激活检查员的三种方法 | pawelgrzybek.com]]></title>
        <id>https://pawelgrzybek.com/three-ways-to-activate-an-inspector-in-node-js/</id>
        <link href="https://pawelgrzybek.com/three-ways-to-activate-an-inspector-in-node-js/"/>
        <updated>2023-03-04T01:07:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://pawelgrzybek.com/three-ways-to-activate-an-inspector-in-node-js/">Three ways to activate an inspector in Node.js | pawelgrzybek.com</a></p><p><strong>概要：</strong></p><p>本文介绍了三种激活 Node.js inspector 的方法，其中一种是使用 NODE_OPTIONS 环境变量来调试间接运行 Node 的进程。如果您是 Node.js 调试器的新手，可以查看作者之前发布的两篇文章：“在 Google Chrome 中进行基本的 Node.js 调试” 和 “解释 Visual Studio Code 调试器中的继续、步过、步入和步出操作”。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[你不需要构建步骤]]></title>
        <id>https://deno.com/blog/you-dont-need-a-build-step</id>
        <link href="https://deno.com/blog/you-dont-need-a-build-step"/>
        <updated>2023-03-03T04:36:45.000Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://deno.com/blog/you-dont-need-a-build-step">You Don't Need a Build Step</a></p><p><strong>概要：</strong></p><p>本文探讨了为什么现代 Web 开发需要构建步骤，以及如何使用 Deno 和 Fresh 等工具实现无需构建的开发。文章介绍了构建步骤的来龙去脉，包括编译、压缩、打包和代码分割等过程，并列举了一些流行的构建工具。作者认为，构建步骤是现代 Web 开发不可避免的一部分，但也带来了复杂性和长时间的构建时间。使用 Deno 和 Fresh 可以实现无需构建的开发，从而提高开发效率和代码质量。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决技术债务的 25% 规则]]></title>
        <id>https://shopify.engineering/technical-debt-25-percent-rule</id>
        <link href="https://shopify.engineering/technical-debt-25-percent-rule"/>
        <updated>2023-03-03T04:35:51.000Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://shopify.engineering/technical-debt-25-percent-rule">The 25 Percent Rule for Tackling Technical Debt</a></p><p><strong>概要：</strong></p><p>这篇文章讨论了技术债务的不同类型，并提出了一种 “25% 规则”，即每周花费 10％的时间解决日常技术债务，另外 10％的时间解决每周技术债务，剩下的 5％用于处理每月和每年的技术债务。作者认为，解决技术债务并不是大规模修复的问题，而是通过文化建设来实现。通过改进日常工作中的代码、庆祝重构代码的能力以及知道何时选择好的而不是完美的，可以帮助解决技术债务问题。</p>]]></content>
    </entry>
</feed>
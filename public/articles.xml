<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-05-10T03:10:59.533Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[GitHub - dai-shi/will-this-react-global-state-work-in-concurrent-rendering: 在 React 并发渲染中测试撕裂和分支。]]></title>
        <id>https://github.com/dai-shi/will-this-react-global-state-work-in-concurrent-rendering</id>
        <link href="https://github.com/dai-shi/will-this-react-global-state-work-in-concurrent-rendering"/>
        <updated>2023-05-10T01:49:33.357Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/dai-shi/will-this-react-global-state-work-in-concurrent-rendering">GitHub - dai-shi/will-this-react-global-state-work-in-concurrent-rendering: Test tearing and branching in React concurrent rendering</a></p><p><strong>概要：</strong></p><p>本文介绍了 React 18 中的一个新特性 —— 并发渲染，以及在全局状态下可能出现的 “tearing” 问题。作者通过测试不同的全局状态库，如 react-redux、zustand、recoil 等，来验证它们在并发渲染下的表现。测试包括更新和挂载时是否存在 tearing，以及暂时是否存在 tearing 等情况。文章指出，这些测试结果仅供参考，因为 tearing 和状态分支可能取决于应用程序的要求，并且测试方法有限。此外，作者还提到了另一个仓库，用于列出全局状态库的比较，欢迎贡献。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不阻塞事件循环的实用指南]]></title>
        <id>https://www.bbss.dev/posts/eventloop/</id>
        <link href="https://www.bbss.dev/posts/eventloop/"/>
        <updated>2023-05-09T08:34:39.705Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.bbss.dev/posts/eventloop/">Practical Guide To Not Blocking The Event Loop</a></p><p><strong>概要：</strong></p><p>本文介绍了 JavaScript 在单线程环境下的事件循环机制，以及如何避免同步任务阻塞事件循环。作者提出了三种解决方案：增加节点数量、将同步任务改为异步任务、将同步任务转移到另一个线程。其中，将同步任务转移到另一个线程需要使用 Worker，并且有数据传输限制。作者还介绍了将同步任务改为异步任务的具体实现方法，即通过将代码块分散到事件循环中来添加同步执行之间的间隙，从而让事件循环得以运行。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2.4 | 天文学]]></title>
        <id>https://astro.build/blog/astro-240/</id>
        <link href="https://astro.build/blog/astro-240/"/>
        <updated>2023-05-09T08:33:23.736Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://astro.build/blog/astro-240/">Astro 2.4 | Astro</a></p><p><strong>概要：</strong></p><p>Astro 2.4 发布了，新增了几个功能：更强大的 CSS 作用域、升级了 <Code /> 组件、在站点地图中支持服务器端渲染、中间件（实验性）和 CSS 内联（实验性）。其中，scopedStyleStrategy 允许使用类选择器来配置更高的特异性，<Code /> 组件升级到了 Shiki 0.14 版本，@astrojs/sitemaps 包更新以支持服务器端渲染，中间件支持拦截请求和响应并动态注入行为，CSS 内联可以通过配置将样式表嵌入到 < style > 标签中。此外，还包括一些 bug 修复和集成功能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[粘性菜单的问题及替代方案]]></title>
        <id>https://adamsilver.io/blog/the-problem-with-sticky-menus-and-what-to-do-instead/</id>
        <link href="https://adamsilver.io/blog/the-problem-with-sticky-menus-and-what-to-do-instead/"/>
        <updated>2023-05-09T02:33:14.398Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://adamsilver.io/blog/the-problem-with-sticky-menus-and-what-to-do-instead/">The problem with sticky menus and what to do instead</a></p><p><strong>概要：</strong></p><p>本文讨论了粘性菜单（即固定在视口边缘的菜单）对用户体验的负面影响。这些菜单会占用页面空间、遮挡内容、缩放时出现问题、难以访问、容易使内部页面锚点失效、距离键盘用户较远并遮挡链接和其他可聚焦元素。作者建议解决根本原因，让页面变短，让用户自由滚动；将相关链接放入上下文中；使用返回顶部链接等方式来替代粘性菜单。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在 React 中使用 useContext：全面指南 - Michael Gold - Medium]]></title>
        <id>https://medium.com/@msgold/using-usecontext-in-react-a-comprehensive-guide-8a9f5271f7a8</id>
        <link href="https://medium.com/@msgold/using-usecontext-in-react-a-comprehensive-guide-8a9f5271f7a8"/>
        <updated>2023-05-08T04:44:16.047Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://medium.com/@msgold/using-usecontext-in-react-a-comprehensive-guide-8a9f5271f7a8">Using useContext in React: a comprehensive guide - Michael Gold - Medium</a></p><p><strong>概要：</strong></p><p>本文介绍了 React 中的 useContext 钩子，它可以方便地在多个组件之间共享数据而无需通过 props 传递。文章详细介绍了什么是 React 中的 Context 机制，以及为什么使用 useContext 很重要，包括避免 prop drilling 和共享数据等优点。文章还提供了一个实际例子来演示如何使用 useContext 创建主题切换器。此外，文章还比较了 useContext 和 Redux 之间的区别和用法，并提供了一些最佳实践和限制。最后，文章总结了 useContext 是 React 开发人员工具箱中有价值的工具之一。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些开发者控制台技巧]]></title>
        <id>https://gomakethings.com/a-few-developer-console-tricks/</id>
        <link href="https://gomakethings.com/a-few-developer-console-tricks/"/>
        <updated>2023-05-08T04:42:31.114Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://gomakethings.com/a-few-developer-console-tricks/">A few developer console tricks</a></p><p><strong>概要：</strong></p><p>本文介绍了一些在浏览器控制台中使用的技巧，包括打开控制台、使用 $() 和 $$() 方法获取元素、使用 $0 变量获取当前选定的元素等。作者认为控制台是前端工作中最好的功能之一。建议使用 Chromium 或 Firefox 进行 JavaScript 开发，因为 Safari 的开发者工具功能较少。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React 服务器组件是什么？]]></title>
        <id>https://www.viget.com/articles/what-even-are-react-server-components/</id>
        <link href="https://www.viget.com/articles/what-even-are-react-server-components/"/>
        <updated>2023-05-08T04:42:10.356Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.viget.com/articles/what-even-are-react-server-components/">What Even Are React Server Components</a></p><p><strong>概要：</strong></p><p>React Server Components 是在服务器上渲染的 React 组件，旨在减少网络瀑布效应。与传统的服务器端渲染 (SSR)、并行获取和架构更改相比，Server Components 具有更好的用户体验、更快的构建速度和更易于维护的特点。Server Components 可以通过在 JS 和 HTML 中填充一些初始数据来减少客户端请求次数，而且这种方式可以嵌套使用，只需要向顶层组件和其子组件发出一次请求即可。Server Components 还可以减小 JS 包的大小，只发送必要的数据给客户端，从而提高性能。Server Components 看起来就像普通的 React 组件，但是客户端无法与之交互，如果需要交互，则需要将一个 React Client Component 插入到 Server Component 中。目前，Server Components 还处于测试阶段，不适合在生产环境中使用，但可以在实验应用程序中进行尝试。NextJS v13 的 App Router 是目前唯一支持 Server Components 的框架，但 React 团队正在帮</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于 LLM 的八件事 | Swizec Teller]]></title>
        <id>https://swizec.com/blog/eight-things-to-know-about-llms/</id>
        <link href="https://swizec.com/blog/eight-things-to-know-about-llms/"/>
        <updated>2023-05-06T02:20:42.799Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://swizec.com/blog/eight-things-to-know-about-llms/">Eight things to know about LLMs | Swizec Teller</a></p><p><strong>概要：</strong></p><p>这篇文章总结了最近人工智能（AI）的进展和引起人们兴奋的原因。其中提到了以下几点：1. 大型语言模型（LLMs）随着规模的增大而变得更好；2.LLMs 具有出人意料的新颖能力，包括 few-shot 和上下文学习；3.LLMs 表现出 “心理模型”；4. 无法可靠地控制 LLMs；5. 目前还没有人知道 LLMs 是如何工作的；6.LLMs 可以胜过人类；7.LLMs 存在偏见问题；8.LLMs 表现很好。作者还提供了一些资源来帮助读者更深入地了解这些问题。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mojo 可能是数十年来最大的编程语言进步。]]></title>
        <id>https://www.fast.ai/posts/2023-05-03-mojo-launch.html</id>
        <link href="https://www.fast.ai/posts/2023-05-03-mojo-launch.html"/>
        <updated>2023-05-05T12:59:37.147Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.fast.ai/posts/2023-05-03-mojo-launch.html">Mojo may be the biggest programming language advance in decades</a></p><p><strong>概要：</strong></p><p>文章介绍了一种名为 Mojo 的新编程语言，它是 Python 的超集，并且可以通过使用 “fn” 和 “struct” 等新语法来实现高性能代码。该语言建立在强大的基础上，包括 LLVM 和 MLIR 等核心技术，使其快速发展和易于开发。作者认为 Mojo 将成为 AI 模型开发的替代 Python 的重要工具，并且预计它将比预期更快地发展和扩展。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js 13.4 在 Vercel 上 - Vercel]]></title>
        <id>https://vercel.com/changelog/next-js-13-4</id>
        <link href="https://vercel.com/changelog/next-js-13-4"/>
        <updated>2023-05-05T01:26:06.105Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://vercel.com/changelog/next-js-13-4">Next.js 13.4 on Vercel – Vercel</a></p><p><strong>概要：</strong></p><p>Next.js 13.4 中的 App Router 现已稳定，Vercel 提供预配置的全局框架定义基础设施，支持构建数据驱动、个性化体验，并实现优化的全球性能自动部署。嵌套路由和布局可轻松共享 UI，同时保留状态并避免昂贵的重新渲染。Next.js App router 原生支持流式响应，可在 Node 和 Edge 运行时进行流式传输，无需代码更改，在 Vercel 上部署为 Edge Functions，提供大幅度的 SEO 和性能改进。服务器组件允许您在组件级别定义数据获取，并轻松表达缓存和重验证策略。Next.js 还提供了内置的 SEO 支持和数据获取支持，以及 Turbopack（Beta）和 Server Actions（Alpha）。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宣布 Tauri 1.3.0 | Tauri 应用程序]]></title>
        <id>https://tauri.app/blog/2023/05/03/tauri-1-3/</id>
        <link href="https://tauri.app/blog/2023/05/03/tauri-1-3/"/>
        <updated>2023-05-05T01:25:41.841Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://tauri.app/blog/2023/05/03/tauri-1-3/">Announcing Tauri 1.3.0 | Tauri Apps</a></p><p><strong>概要：</strong></p><p>Tauri 团队发布了 1.3 版本，包括安全改进、新功能和重要的错误修复。该版本新增了 NSIS，可以使用 NSIS 创建 Windows 应用程序安装程序，还有其他一些改进和修复。其中最重要的是对外部 API 访问、浏览器参数和 Bundler 进行了加固，以提高应用程序的安全性。同时，开发者需要注意更新 NPM 和 Cargo 依赖项，以确保应用程序的稳定性和安全性。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Vercel Spaces 实现规模化的高质量软件 - Vercel]]></title>
        <id>https://vercel.com/blog/vercel-spaces</id>
        <link href="https://vercel.com/blog/vercel-spaces"/>
        <updated>2023-05-05T00:18:14.981Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://vercel.com/blog/vercel-spaces">Quality software at scale with Vercel Spaces – Vercel</a></p><p><strong>概要：</strong></p><p>Vercel推出了Vercel Spaces，它提供了强大的工具和惯例，可以与monorepo设置集成，使开发人员能够在保持质量的同时有效地扩展。Spaces仪表板提供了对开发工作流程、代码健康状况和构建日志的洞察力，并包括通过Conformance、Code Owners和Vercel Runs提升效率和消除障碍的新功能。Conformance可以在开发生命周期的早期自动检测前端产品的关键问题，Code Owners可以帮助确定谁对代码负责，并确保代码变更由正确的人审查，而Vercel Runs通过交互式用户界面提供了一种更简单的调试任务的方式。Vercel Spaces可供Vercel企业客户提前使用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular v16 已经发布了！- Angular 博客]]></title>
        <id>https://blog.angular.io/angular-v16-is-here-4d7a28ec680d</id>
        <link href="https://blog.angular.io/angular-v16-is-here-4d7a28ec680d"/>
        <updated>2023-05-05T00:03:11.942Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.angular.io/angular-v16-is-here-4d7a28ec680d">Angular v16 is here! - Angular Blog</a></p><p><strong>概要：</strong></p><p>Angular 发布了最大的版本更新，包括改进响应性、服务器端渲染和工具等方面。其中最重要的是引入了全新的响应性模型，提高了性能和开发者体验。该版本还支持服务端渲染和水合，提供了更好的工具和单独的 API，以及其他许多改进。此外，Angular 还计划在未来一年内推出更多的改进和功能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TailwindCSS vs. UnoCSS

TailwindCSS 与 UnoCSS]]></title>
        <id>https://dev.to/mapleleaf/tailwindcss-vs-unocss-2a53</id>
        <link href="https://dev.to/mapleleaf/tailwindcss-vs-unocss-2a53"/>
        <updated>2023-05-05T00:02:05.363Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://dev.to/mapleleaf/tailwindcss-vs-unocss-2a53">TailwindCSS vs. UnoCSS</a></p><p><strong>概要：</strong></p><p>本文对比了 TailwindCSS 和 UnoCSS 两个工具，总结了它们的特点、语言、文档、自定义样式和编辑器支持等方面。TailwindCSS 拥有完整的 CSS 特性类名，可以通过任意值、变体和属性来进行全面的样式设计，而 UnoCSS 则支持所有 TailwindCSS 的功能，并提供了一些额外的功能，如变体组、CSS 网格流体列和更多动画效果。在语言方面，TailwindCSS 有一个相对规范的类名命名方式，UnoCSS 则更加灵活。在文档和自定义样式方面，两者都有不错的表现，但 UnoCSS 的交互式文档和颜色提示更加出色。在编辑器支持方面，TailwindCSS 支持较好，但存在一些缺陷，而 UnoCSS 的高亮显示和颜色提示则更为出色。作者认为，如果你看重灵活性和额外的功能，你可能会喜欢 UnoCSS，但如果你看重约束和更清晰的编写语言，则应该选择</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js 13.4]]></title>
        <id>https://nextjs.org/blog/next-13-4</id>
        <link href="https://nextjs.org/blog/next-13-4"/>
        <updated>2023-05-04T23:58:36.281Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://nextjs.org/blog/next-13-4">Next.js 13.4</a></p><p><strong>概要：</strong></p><p>Next.js 13.4 是一个重要的版本，标志着 App Router 的稳定性。这个版本增加了许多新特性，包括 React Server Components、嵌套路由和布局、简化数据获取、流式渲染和 Suspense、内置 SEO 支持等。其中最重要的是 App Router，它是 Next.js 的核心组件，可以让开发者更方便地定义页面布局和数据获取方式。此外，Turbopack 也是一个值得关注的新功能，它可以加速本地开发和生产构建过程。最后，Server Actions 是一个实验性的功能，可以在服务器端直接修改数据，不需要客户端 JavaScript。总之，Next.js 13.4 为开发者提供了更强大的工具，帮助他们更轻松地构建动态、个性化和全球化的 Web 应用程序。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何测试您的类型]]></title>
        <id>https://www.totaltypescript.com/how-to-test-your-types</id>
        <link href="https://www.totaltypescript.com/how-to-test-your-types"/>
        <updated>2023-05-04T12:52:44.759Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.totaltypescript.com/how-to-test-your-types">How to test your types</a></p><p><strong>概要：</strong></p><p>本文介绍了三种测试 TypeScript 类型的方法。首先是使用 vitest，这是一个基于 Vite 的强大测试运行器，可以用来测试运行时代码和类型。其次是自己编写测试代码，可以使用 Expect 和 Equal 等类型帮助工具来测试特定类型，并在测试套件中运行 tsc 检查类型测试是否失败。最后，还介绍了一个名为 tsd 的库，它与 vitest 很相似，但包含了所有必要的内容，使得测试更加方便。对于应用程序开发而言，测试类型并不是必须的，但对于任何将被大量人使用的库而言，测试类型是至关重要的。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[10 种使用 ChatGPT 学习更好的方法 - 斯科特・H・扬]]></title>
        <id>https://www.scotthyoung.com/blog/2023/05/02/chatgpt-learning-tips/</id>
        <link href="https://www.scotthyoung.com/blog/2023/05/02/chatgpt-learning-tips/"/>
        <updated>2023-05-04T09:01:50.070Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.scotthyoung.com/blog/2023/05/02/chatgpt-learning-tips/">10 Ways You Can Use ChatGPT to Learn Better - Scott H Young</a></p><p><strong>概要：</strong></p><p>这篇文章总结了读者们如何使用大型语言模型（LLMs）来学习和研究的建议，并探讨了使用这些工具的优缺点。作者提醒读者要注意，虽然 ChatGPT 可以进行人类般的对话，但它并不是真正的人类，有时会提供错误的答案。然而，ChatGPT 在许多任务上都很有用，例如作为个人导师、语言教练、生成摘要、与长文本对话、简化专业术语等。作者还提到了一些不应该使用 AI 工具的情况，例如期望它们正确地获取事实、引用和数学等方面。最后，作者邀请读者分享他们使用 ChatGPT 或其他 AI 工具进行学习的经验和建议。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Canaries：在 Meta 之外启用增量功能发布的 React]]></title>
        <id>https://react.dev/blog/2023/05/03/react-canaries</id>
        <link href="https://react.dev/blog/2023/05/03/react-canaries"/>
        <updated>2023-05-04T06:53:29.142Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://react.dev/blog/2023/05/03/react-canaries">React Canaries: Enabling Incremental Feature Rollout Outside Meta – React</a></p><p><strong>概要：</strong></p><p>React 团队推出了一个新的官方支持的 Canary 版本，让开发者可以在稳定版本发布之前就采用新功能。这个 Canary 版本只包含 React 团队相信已经准备好被采用的特性，而不像实验性版本那样可能会有重大变化。Canary 版本可以让框架在全局 React 发布计划之外单独采用 React 特性，也可以让框架在自己的次要版本中发布 React 相关的重大变更，而不会破坏 semver。React 将按照 semver 规范每个稳定版本进行更新，同时也会在博客上发布 Canary 版本中的重大变更和新特性。Canary 版本需要被固定版本号，以避免包含重大变更。除此之外，React 的稳定版本不会有任何改变。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个文件中多个样式表・Issue #5629・w3c/csswg-drafts]]></title>
        <id>https://github.com/w3c/csswg-drafts/issues/5629</id>
        <link href="https://github.com/w3c/csswg-drafts/issues/5629"/>
        <updated>2023-05-04T04:50:11.466Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/w3c/csswg-drafts/issues/5629">Multiple stylesheets per file · Issue #5629 · w3c/csswg-drafts</a></p><p><strong>概要：</strong></p><p>这篇文章讨论了在 JS 中导入 CSSStyleSheets 的问题。目前的解决方法是将 CSS 编译为 JS 模块，但这会降低浏览器直接加载和解析 CSS 的性能。Web Bundles 可能会通用地解决这个问题，但其未来在多个浏览器上的应用尚不确定。作者提出了一个新的解决方案：引入一个 @sheet 规则，它包含整个样式表作为其内容，以允许 CSS 的打包。该提议对于管理 JS 中的 CSSStyleSheets 的代码最为相关，并且也可以作为用户自定义 CSS 加载程序的桥梁，通过标准化打包，可以使用客户端实用程序进行作用域限定。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[熊猫 CSS - 无运行时开销的 CSS-in-JS]]></title>
        <id>https://infinum.com/blog/panda-css-css-in-js-without-runtime-overhead/</id>
        <link href="https://infinum.com/blog/panda-css-css-in-js-without-runtime-overhead/"/>
        <updated>2023-05-04T04:49:11.860Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://infinum.com/blog/panda-css-css-in-js-without-runtime-overhead/">Panda CSS – CSS-in-JS without Runtime Overhead</a></p><p><strong>概要：</strong></p><p>本文介绍了一个名为 Panda CSS 的前端工具库，它提供了一组实用类、模式和配方，用于在 Web 应用程序中构建现代和响应式用户界面。相比于纯字符串的方法，Panda CSS 提供了一种声明性的方法来使用 JavaScript 对象对组件进行样式设置，使其更易读和易维护。此外，本文还介绍了如何在 Next.js 项目中使用 Panda CSS，并探讨了其主题、模式和配方等高级用法。最后，本文指出，尽管 Panda CSS 目前仍处于实验阶段，但它有望成为前端开发流程中的重要组成部分。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么我喜欢使用地图（和 WeakMaps）来处理 DOM 节点]]></title>
        <id>https://www.macarthur.me/posts/maps-for-dom-nodes</id>
        <link href="https://www.macarthur.me/posts/maps-for-dom-nodes"/>
        <updated>2023-05-04T04:47:53.139Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.macarthur.me/posts/maps-for-dom-nodes">Why I Like Using Maps (and WeakMaps) for Handling DOM Nodes</a></p><p><strong>概要：</strong></p><p>本文介绍了在处理大量 DOM 节点时，Maps（和 WeakMaps）是特别有用的工具的原因。与使用对象作为键 / 值存储相比，使用 Map 可以更简单、更强大、更高效地管理状态，并且不需要设置或读取唯一属性。此外，Map 还具有自动垃圾回收的功能，可以更有效地管理内存。总之，Map 对于处理大量 DOM 节点非常有用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RegExGPT]]></title>
        <id>https://regexgpt.app/</id>
        <link href="https://regexgpt.app/"/>
        <updated>2023-05-04T04:47:06.555Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://regexgpt.app/">RegExGPT</a></p><p><strong>概要：</strong></p><p>RegExGPT 是一种工具，它可以让人们通过输入文本转换的示例和期望结果来生成正则表达式模式。用户还可以使用自然语言输入来解释他们想匹配的模式，并选择输出的编程语言。使用 RegExGPT 时，需要输入要转换的文本示例和期望结果，选择编程语言并点击 “生成” 按钮来生成正则表达式模式。生成的正则表达式模式可以在代码中使用，将输入文本转换为期望的结果。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[介绍 React Native macOS 0.71 | React Native]]></title>
        <id>https://devblogs.microsoft.com/react-native/2023-04-27-announcing-macos-71/</id>
        <link href="https://devblogs.microsoft.com/react-native/2023-04-27-announcing-macos-71/"/>
        <updated>2023-05-04T04:42:51.689Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://devblogs.microsoft.com/react-native/2023-04-27-announcing-macos-71/">Introducing React Native macOS 0.71 | React Native</a></p><p><strong>概要：</strong></p><p>React Native macOS 发布了 0.71 版本，这是该平台首次与 iOS、Android 和 Windows 保持同步。为了实现这个目标，开发团队不得不跳过了一些中间版本，并开始着手 0.72 版本。此外，该版本还加入了对 Fabric 的实验性支持，但需要注意的是这只是一个概念验证，存在不稳定性。除此之外，该版本也进行了许多清理和修复工作，以使未来的发布更加顺畅。具体变化请参考 GitHub Release。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebContainers 现在可以在 Safari、iOS 和 iPadOS 上运行。]]></title>
        <id>https://blog.stackblitz.com/posts/webcontainers-are-now-supported-on-safari/</id>
        <link href="https://blog.stackblitz.com/posts/webcontainers-are-now-supported-on-safari/"/>
        <updated>2023-05-04T04:37:40.445Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.stackblitz.com/posts/webcontainers-are-now-supported-on-safari/">WebContainers now run on Safari, iOS, and iPadOS</a></p><p><strong>概要：</strong></p><p>StackBlitz 宣布其 WebContainers 已经可以在 Safari、iOS 和 iPadOS 上运行。用户现在可以在 iPhone 或 iPad 上尝试交互式代码示例和 playground，Safari 支持目前处于 beta 版本。StackBlitz 的 WebContainers 是基于未来技术构建的，包括 Wasm threads 和 SharedArrayBuffer，这些技术在 Safari 上得到了支持。WebContainers 在复杂项目中的运行速度比本地快得多，StackBlitz 团队仍在不断优化。此外，StackBlitz 团队通过加入 Bytecode Alliance，致力于推动 Web 技术的发展。用户可以在所有最新的桌面浏览器上使用 WebContainers，包括 Chrome、Firefox 和 Safari，对于移动设备而言，Android 上的 Chrome、Chromium-based 浏览器和 Firefox 可以使用 WebContainers，iOS 和 iPadOS 上的 Safari 目前处于 beta 版本。StackBlitz 团队将继续改进 WebContainers，并计划在今年内推出一系列重大更新。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 React 服务器组件在您的博客上显示一个视图计数器。]]></title>
        <id>https://scastiel.dev/view-counter-react-server-components</id>
        <link href="https://scastiel.dev/view-counter-react-server-components"/>
        <updated>2023-05-04T04:36:19.199Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://scastiel.dev/view-counter-react-server-components">Display a view counter on your blog with React Server Components</a></p><p><strong>概要：</strong></p><p>本文介绍了如何在个人博客中使用 React Server Components、Streaming 和 Suspense 实现浏览量计数器。作者使用 Plausible 工具的 API 获取页面的浏览量，然后将其渲染到页面上。传统的方法是在客户端和服务器之间进行通信，但是使用 React Server Components 可以更加优雅地处理这个问题。通过在 <PageViews /> 组件中调用 getCountForPage 函数，然后在页面.tsx 文件中渲染计数，可以实现此目的。而使用 Streaming 则可以让服务器先发送一个初始版本的页面，然后保持连接打开，并稍后发送第二个版本（包含浏览量）。最终，读者将看到完整的页面，其中包括浏览量计数器。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在 React 中编写注释：好的、坏的和丑陋的]]></title>
        <id>https://dmitripavlutin.com/react-comments/</id>
        <link href="https://dmitripavlutin.com/react-comments/"/>
        <updated>2023-05-04T04:35:39.416Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://dmitripavlutin.com/react-comments/">How to Write Comments in React: The Good, the Bad and the Ugly</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了在 React 中添加注释的三种方法。第一种是使用 JSX 注释语法，但这种方式有些冗长；第二种是在 JSX 标签外使用 JavaScript 注释，可以更简洁地添加注释；第三种是在 JSX 标签内部使用 JavaScript 注释，可以针对特定元素添加注释。作者认为第三种方法最好，因为它简洁明了且针对性强。总之，读者可以根据自己的喜好选择合适的注释方式。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布 v6.11.0・remix-run/react-router]]></title>
        <id>https://github.com/remix-run/react-router/releases/tag/react-router%406.11.0</id>
        <link href="https://github.com/remix-run/react-router/releases/tag/react-router%406.11.0"/>
        <updated>2023-05-04T02:58:08.940Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/remix-run/react-router/releases/tag/react-router%406.11.0">Release v6.11.0 · remix-run/react-router</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 React Router 版本 6.11.0 的更新内容。其中，一些小的改动包括在 useFetcher 中启用 basename 支持，更新 @remix-run/router 依赖等。在补丁方面，使用 RouterProvider 时，通过 @remix-run/router 实例处理相对路由，可以稳定地使用 useNavigate/useSubmit/fetcher.submit，而 BrowserRouter 仍然依赖于 useLocation ()，因此这些钩子在位置更改时仍不稳定。此外，fetchers 不再在搜索参数更改或路由到相同 URL 时重新验证，并且只会在操作提交或 router.revalidate 调用时重新验证。还修复了一些错误，如使用 Component 而不是 element 时的重新渲染问题，<Link to="//"> 和其他无效 URL 值的优雅失败等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qwik 达到了 v1.0 版本。]]></title>
        <id>https://www.builder.io/blog/qwik-v1</id>
        <link href="https://www.builder.io/blog/qwik-v1"/>
        <updated>2023-05-04T02:57:48.314Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.builder.io/blog/qwik-v1">Qwik Reaches v1.0</a></p><p><strong>概要：</strong></p><p>Qwik 是一个全栈 Web 框架，旨在通过 JavaScript 流式传输和延迟执行等技术提供快速、可扩展和易维护的 Web 应用程序。它借鉴了 React、Vue、Angular、Svelte 等框架的优点，并提供了一套强大的工具集，使开发人员能够快速高效地构建 Web 应用程序。Qwik 还提供了许多功能，包括 JSX、基于目录的路由、数据获取、中间件逻辑、UI 组件、国际化、身份验证、CMS、样式和测试等。此外，Qwik 社区不断增长，为开发人员提供了支持和协作的平台。如果想要尝试使用 Qwik，可以查看其入门页面、教程或 Stackblitz。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[即时工程 vs 盲目提示]]></title>
        <id>https://mitchellh.com/writing/prompt-engineering-vs-blind-prompting</id>
        <link href="https://mitchellh.com/writing/prompt-engineering-vs-blind-prompting"/>
        <updated>2023-05-04T02:52:35.944Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://mitchellh.com/writing/prompt-engineering-vs-blind-prompting">Prompt Engineering vs. Blind Prompting</a></p><p><strong>概要：</strong></p><p>本文介绍了 Prompt Engineering，即利用提示来有效地从语言模型中提取信息的过程，通常用于实际应用。文章指出，许多人声称正在进行 Prompt Engineering，但实际上只是盲目提示。因此，本文提供了一种基于实验方法的 Prompt Engineering 示例，以展示如何为应用程序构建可靠的功能。作者强调了选择问题、演示集、提示候选项和测试提示等步骤的重要性，并解释了如何选择最终的提示方案。最后，作者呼吁更多的实验研究来支持 Prompt Engineering 技术的发展。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Rust 在 10 分钟或更短的时间内构建和部署 URL 缩短器]]></title>
        <id>https://www.shuttle.rs/blog/2022/03/13/url-shortener</id>
        <link href="https://www.shuttle.rs/blog/2022/03/13/url-shortener"/>
        <updated>2023-05-04T02:48:50.993Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.shuttle.rs/blog/2022/03/13/url-shortener">Building and Deploying a URL shortener with Rust in 10 minutes or less</a></p><p><strong>概要：</strong></p><p>这篇文章讲述了一个软件开发人员在凌晨时分突然想到的一个想法：能否在不需要担心基础架构的情况下快速构建一个有用的应用程序。他使用了 Rust 编程语言，结合 serverless 平台 Shuttle 和 Postgres 数据库，最终成功地构建了一个简单的 URL 缩短服务。作者认为，虽然现实中的软件工程很复杂，涉及到不同团队和技能集的协作，但这种新型的无需关注基础架构的开发模式是可行的，并且可以带来更好的体验。</p>]]></content>
    </entry>
</feed>
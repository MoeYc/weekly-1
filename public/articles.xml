<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-03-17T03:05:45.179Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[介绍 Warp AI]]></title>
        <id>https://www.warp.dev/blog/introducing-warp-ai</id>
        <link href="https://www.warp.dev/blog/introducing-warp-ai"/>
        <updated>2023-03-17T02:43:41.376Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.warp.dev/blog/introducing-warp-ai">Introducing Warp AI</a></p><p><strong>概要：</strong></p><p>Warp AI 是一款内置于终端的人工智能，旨在帮助开发人员更高效地工作。用户可以通过向 Warp AI 提问来掌握终端的使用方法，包括解释错误、建议修复方案、编写脚本等。Warp AI 与终端输入和输出的交互方式是其最大优势，它可以将 AI 生成的命令直接运行，而无需复制 / 粘贴或切换上下文。此外，Warp AI 还具有隐私和安全保护措施，只有用户明确输入的内容才会离开本地计算机。目前，Warp AI 已经推出免费试用版，未来将成为付费计划的一部分。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布 v6.9.0・remix-run/react-router]]></title>
        <id>https://github.com/remix-run/react-router/releases/tag/react-router%406.9.0</id>
        <link href="https://github.com/remix-run/react-router/releases/tag/react-router%406.9.0"/>
        <updated>2023-03-16T07:16:32.246Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/remix-run/react-router/releases/tag/react-router%406.9.0">Release v6.9.0 · remix-run/react-router</a></p><p><strong>概要：</strong></p><p>React Router 发布了 6.9.0 版本，支持使用 React 组件定义路由元素和错误元素字段。此外，还引入了 Lazy Route Modules，以保持应用程序包的小巧和支持代码分割路由。此功能通过 lazy () 路由属性实现，是一个异步函数，解析路由定义的非匹配部分。该版本还修复了一些问题，并改进了上下文提供程序的记忆化，以避免不必要的重新渲染。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Execa 7 的无 Shell 脚本 | ITNEXT]]></title>
        <id>https://itnext.io/shell-free-scripts-with-execa-7-885fb3b42f83</id>
        <link href="https://itnext.io/shell-free-scripts-with-execa-7-885fb3b42f83"/>
        <updated>2023-03-16T06:20:44.073Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://itnext.io/shell-free-scripts-with-execa-7-885fb3b42f83">Shell-free scripts with Execa 7 | ITNEXT</a></p><p><strong>概要：</strong></p><p>Google 近期推出了一个名为 zx 的项目，将 shell 脚本和 JavaScript 语言结合起来。这个项目利用 7 年历史的 Node 模块 Execa，使命令和进程易于执行，并提供了类似于 zx 的模式，但采用更简单的纯 JavaScript 方法。使用 Execa，不需要记忆任何 shell 语法，几乎所有特定于 shell 的功能都可以在 JavaScript 中表达。此外，Execa 还具有安全、跨平台和高效等优点。它没有要求任何特殊的二进制文件，也不包含任何实用程序，专注于小型和模块化。除此之外，Execa 还添加了一些额外的选项，如优雅终止、清理、交错输出等，可用于设置单个或多个命令。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[反应性简史]]></title>
        <id>https://www.builder.io/blog/history-of-reactivity</id>
        <link href="https://www.builder.io/blog/history-of-reactivity"/>
        <updated>2023-03-15T15:56:57.155Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.builder.io/blog/history-of-reactivity">A Brief History of Reactivity</a></p><p><strong>概要：</strong></p><p>本文探讨了响应式编程在不同框架中的演变历程。作者分享了自己在使用 Macromedia Flex、AngularJS、React、Knockout、Svelte、RxJS、Vue、MobX 和 SolidJS 等框架时的经验和见解。文章指出，随着框架的发展，人们越来越注重细粒度的响应式系统，以便更好地管理状态和提高性能。作者介绍了 Qwik 框架的特点，该框架将组件序列化为 HTML，从而实现了无缝的客户端渲染和服务器端渲染的切换。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023 年每个前端开发人员都应该知道的 6 个 CSS 片段]]></title>
        <id>https://web.dev/6-css-snippets-every-front-end-developer-should-know-in-2023/</id>
        <link href="https://web.dev/6-css-snippets-every-front-end-developer-should-know-in-2023/"/>
        <updated>2023-03-15T15:34:42.142Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://web.dev/6-css-snippets-every-front-end-developer-should-know-in-2023/">6 CSS snippets every front-end developer should know in 2023</a></p><p><strong>概要：</strong></p><p>本文介绍了六个有用的 CSS 技巧，包括使用容器查询、创建滚动吸附效果、避免使用 grid 的 position: absolute、快速制作圆形、使用层叠样式表（cascade layers）控制变体和使用逻辑属性（logical properties）来减少代码量。其中，容器查询是经过多年等待后在 2023 年终于得到了浏览器支持；滚动吸附可以帮助实现系统滚动 UX，并提供有意义的停止点；使用层叠样式表可以方便地插入新的变体，而不必担心它们会干扰原有的变体；逻辑属性可以根据书写模式和文档方向自动调整样式，从而减少代码量。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt 3.3・Nuxt

努克斯特 3.3・努克斯特]]></title>
        <id>https://nuxt.com/blog/v3-3</id>
        <link href="https://nuxt.com/blog/v3-3"/>
        <updated>2023-03-15T10:13:09.696Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://nuxt.com/blog/v3-3">Nuxt 3.3 · Nuxt</a></p><p><strong>概要：</strong></p><p>Nuxt.js 发布了新版本，增加了本地模块开发、自动重启服务器和性能优化等功能。该版本还提供了一些新的组件和可组合函数，包括错误处理组件 <NuxtClientFallback> 和处理不受信任用户输入的 useHeadSafe 可组合函数。此外，该版本还改进了类型定义和 Nitro 引擎，支持自定义配置模式，并且有更好的 Chrome DevTools 支持。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[模型是什么？定义、类型以及如何创建 ——LogRocket 博客]]></title>
        <id>https://blog.logrocket.com/product-management/mockup-definition-types-how-to-create/</id>
        <link href="https://blog.logrocket.com/product-management/mockup-definition-types-how-to-create/"/>
        <updated>2023-03-15T06:15:12.060Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.logrocket.com/product-management/mockup-definition-types-how-to-create/">What is a mockup? Definition, types, and how to create one - LogRocket Blog</a></p><p><strong>概要：</strong></p><p>本文介绍了在产品管理中使用 Mockup 的最佳实践。Mockup 是产品想法的视觉表现，可以帮助定义、沟通和验证产品愿景，并与管理层、开发团队、跨职能团队甚至客户进行共享。Mockup 包括设计和功能元素，如颜色、字体、信息架构、按钮点击等，提供最基本的框架来帮助您可视化和讨论产品想法或设计。文章还介绍了创建 Mockup 的不同类型和最佳实践，以及持续更新 Mockup 的过程和好处。Mockup 可以提高沟通效率、减少开发成本、改进用户体验等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入探究 TanStack 查询中的突变 - LogRocket 博客]]></title>
        <id>https://blog.logrocket.com/deep-dive-mutations-tanstack-query/</id>
        <link href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/"/>
        <updated>2023-03-15T06:14:19.143Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/">A deep dive into mutations in TanStack Query - LogRocket Blog</a></p><p><strong>概要：</strong></p><p>TanStack Query 是一个用于在 React 应用程序中获取、缓存、同步和更新异步数据的最佳库之一。它非常易于使用，具有零配置，并帮助您解决状态管理问题并控制应用程序的数据，以避免其控制您。 TanStack Query 有三个主要概念：查询、变异和查询失效。本文将重点介绍变异，包括变异的副作用、失效和并行实现。通过使用 useMutation Hook，可以轻松地处理所有更新、创建和删除请求。同时，乐观更新是使用 TanStack Query 变异的关键优势之一。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - nedbat/watchgha：实时显示当前 GitHub 操作运行情况]]></title>
        <id>https://github.com/nedbat/watchgha</id>
        <link href="https://github.com/nedbat/watchgha"/>
        <updated>2023-03-15T04:17:54.551Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/nedbat/watchgha">GitHub - nedbat/watchgha: Live display of current GitHub action runs</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了一个名为 “watch_gha_runs” 的 Python 包，它提供了一个命令，可以监视 GitHub Action 的运行状态。用户只需提供 GitHub 仓库的 URL 和分支名称，即可显示该分支上最新的 GitHub Action 运行状态。如果有任何正在进行的运行，则每秒钟刷新一次以显示当前状态。此外，该命令还提供了丰富的输出信息，包括运行和任务的状态、步骤等。作者表示，该代码目前存在一些问题，需要进一步完善。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[获取用户后，我学到了 4 件事情]]></title>
        <id>https://basementcommunity.bearblog.dev/things-i-learned/</id>
        <link href="https://basementcommunity.bearblog.dev/things-i-learned/"/>
        <updated>2023-03-15T04:17:02.961Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://basementcommunity.bearblog.dev/things-i-learned/">4 things i learned after getting users</a></p><p><strong>概要：</strong></p><p>文章介绍了作者在运营一个以用户生成内容为主的网站时所学到的四件事情。首先，无论你做什么，总会有人滥用你的网站。其次，你需要一个性能监控系统。第三，你需要优化你的 SQL 查询。最后，你需要听取用户的反馈和建议。在文章中，作者分享了他是如何应对这些问题的，并提供了一些解决方案。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在 React 中拖放]]></title>
        <id>https://www.robinwieruch.de/react-drag-and-drop/</id>
        <link href="https://www.robinwieruch.de/react-drag-and-drop/"/>
        <updated>2023-03-14T14:53:16.247Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.robinwieruch.de/react-drag-and-drop/">How to Drag and Drop in React</a></p><p><strong>概要：</strong></p><p>本文是一篇 React 教程，通过实例讲解如何在 React 中使用拖放功能。您将逐步学习如何创建一个 DnD 组件，首先作为垂直列表，然后作为水平列表，并在其中进行大量自定义示例。我们将使用 react-beautiful-dnd 进行此 React 教程。文章介绍了如何使用 useState Hook 初始化状态列表，如何使用 Droppable 和 Draggable 组件以及如何使用 render prop 模式提供更多控制权。最后，您将学习如何将垂直拖放列表转换为水平拖放列表。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[创造一个 “成功之坑”]]></title>
        <id>https://thecuriousleader.work/posts/create-the-pit-of-success/</id>
        <link href="https://thecuriousleader.work/posts/create-the-pit-of-success/"/>
        <updated>2023-03-14T04:30:19.173Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://thecuriousleader.work/posts/create-the-pit-of-success/">Create a "pit of success"</a></p><p><strong>概要：</strong></p><p>本文介绍了一种名为 “三重循环技术领导” 的领导策略，旨在帮助技术领导者创造一个成功不可避免的环境，从而提高信任、内在动机和工作满意度。该策略基于双循环学习和组织和系统原则，并使用广泛接受的教练原则来构建系统性教练技能集。实现这种方法需要通过三个循环（行动、适应和意识）迭代解决团队遇到的问题，并实施最佳解决方案。同时，需要掌握主动倾听、达成明确协议、提出有力问题、推动前进行动和对自己和他人负责等技能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 2.40 的亮点 | GitHub 博客]]></title>
        <id>https://github.blog/2023-03-13-highlights-from-git-2-40/</id>
        <link href="https://github.blog/2023-03-13-highlights-from-git-2-40/"/>
        <updated>2023-03-14T04:19:29.946Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.blog/2023-03-13-highlights-from-git-2-40/">Highlights from Git 2.40 | The GitHub Blog</a></p><p><strong>概要：</strong></p><p>Git 2.40 已发布，来自 88 位贡献者的功能和错误修复中有 30 位是新面孔。该版本增加了一些新特性，如支持 Emacs 的 git jump、支持 --use-mailmap 选项的 git cat-file -s 和 --batch-check 等。此外，该版本还将 git bisect 和 git add --interactive 完全实现为本地内置程序，并对 CI 基础架构进行了一些底层改进。这个版本也标志着 Git 从 Perl 或 Shell 实现的旧部分到更现代的 C 等价物的长期努力的结束。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - pgrok/pgrok：穷人版 ngrok - 通过 SSH 远程端口转发的多租户 HTTP 反向隧道解决方案]]></title>
        <id>https://github.com/pgrok/pgrok</id>
        <link href="https://github.com/pgrok/pgrok"/>
        <updated>2023-03-14T04:17:38.254Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/pgrok/pgrok">GitHub - pgrok/pgrok: Poor man's ngrok - a multi-tenant HTTP reverse tunnel solution through SSH remote port forwarding</a></p><p><strong>概要：</strong></p><p>pgrok 是一个基于 SSH 协议的多租户 HTTP 反向隧道解决方案，旨在为需要将本地开发环境暴露到公共互联网的小团队提供稳定的子域名，并通过 OIDC 协议由 SSO 进行门控。它可以作为 ngrok 企业版的替代品，但不建议将其放在生产系统中使用。pgrok 要求用户拥有自己的域名和 SSO 提供商。对于个人和生产系统，建议购买 ngrok。该项目的目标是为那些不熟悉服务器操作的社区经理、销售和产品经理等人员提供更好的用户体验。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[10 种放慢节奏却能完成任务的方法]]></title>
        <id>https://tinybuddha.com/blog/10-ways-to-slow-down-and-still-get-things-done/</id>
        <link href="https://tinybuddha.com/blog/10-ways-to-slow-down-and-still-get-things-done/"/>
        <updated>2023-03-14T04:11:15.793Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://tinybuddha.com/blog/10-ways-to-slow-down-and-still-get-things-done/">10 Ways to Slow Down and Still Get Things Done</a></p><p><strong>概要：</strong></p><p>这篇文章提出了一些方法，帮助人们在日常生活中放慢节奏。作者认为，即使是工业和数字革命承诺提高生产力，让人们可以少工作、过更平衡的生活，但事实并非如此。随着技术进步，我们比以往任何时候都要工作更长时间，而且具有讽刺意味的是，我们在经济上越来越困难，并且每年都会积累更多的债务。因此，作者建议大家可以自由地选择工作时间，但如果你感到压力大或与当下脱节，可能需要尝试一些方法来放松自己。这些方法包括：缓慢地吃饭、起床后花 15 分钟什么也不做、欣赏美丽的图片、选择一个单一任务等。通过这些小改变，人们可以在不影响生产力的情况下减缓生活的节奏。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一次删除多个 Git 标签]]></title>
        <id>https://rafaelcamargo.com/blog/deleting-multiple-git-tags-at-once/</id>
        <link href="https://rafaelcamargo.com/blog/deleting-multiple-git-tags-at-once/"/>
        <updated>2023-03-14T04:09:31.045Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://rafaelcamargo.com/blog/deleting-multiple-git-tags-at-once/">Deleting multiple Git tags at once</a></p><p><strong>概要：</strong></p><p>本文介绍了如何删除 Git 项目中的多个标签。可以通过传递要删除的标签列表来一次性删除多个标签，也可以使用过滤器列出所有现有标签并按条件删除。如果需要删除所有标签，则可以运行相应的命令。无论是进行本地还是远程清理，上述任何命令都可以几乎立即完成工作，节省宝贵的时间。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[理查德・塔尔斯 | TypeScript 技术面试]]></title>
        <id>https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html</id>
        <link href="https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html"/>
        <updated>2023-03-13T12:20:09.749Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html">Richard Towers | Typescripting the technical interview</a></p><p><strong>概要：</strong></p><p>这篇文章是一篇以 Aphyr 的 Typing the technical interview 为蓝本的技术面试题解析。在这个故事中，主人公接受了一个 N-Queens 编程问题的挑战，并通过 TypeScript 实现了一个解决方案。文章通过描述主人公与面试官 Criss 的对话，展示了如何使用 TypeScript 来解决编程问题。整个过程充满了符号、神秘和幽默感。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么前端世界忽略了 Web 组件・保罗・阿姆斯特朗]]></title>
        <id>https://paularmstrong.dev/blog/2023/03/13/why-we-do-not-write-web-components/</id>
        <link href="https://paularmstrong.dev/blog/2023/03/13/why-we-do-not-write-web-components/"/>
        <updated>2023-03-13T12:17:44.062Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://paularmstrong.dev/blog/2023/03/13/why-we-do-not-write-web-components/">Why the frontend world ignores Web Components • Paul Armstrong</a></p><p><strong>概要：</strong></p><p>Web Components 一直被认为是为浏览器而非开发人员设计的，因此前端开发人员更倾向于使用 React、Angular、Vue 等框架。Web Components 存在测试性、缺乏统一框架、跨组件状态管理和三种语言等问题，这些都使得它们难以维护且不易上手。此外，Web Components 在文档和教程方面也存在不足，使得开发人员难以快速掌握其使用方法。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hooks 是一个错误吗？| jakelazaroff.com]]></title>
        <id>https://jakelazaroff.com/words/were-react-hooks-a-mistake/</id>
        <link href="https://jakelazaroff.com/words/were-react-hooks-a-mistake/"/>
        <updated>2023-03-13T12:16:56.889Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://jakelazaroff.com/words/were-react-hooks-a-mistake/">Were React Hooks a Mistake? | jakelazaroff.com</a></p><p><strong>概要：</strong></p><p>本文探讨了 React 编程模型的不同之处，以及为什么有些人更喜欢使用 signal-based components。作者认为，人们对组件的心理模型与 React 中的函数组件和 hooks 的工作方式不匹配。与类组件相比，signal-based components 更加相似。文章还介绍了 Solid 等信号驱动框架，并讨论了它们与 React hooks 之间的区别和权衡。最后，作者总结说，现在的框架似乎正在尝试在 hooks 的可组合性和类的稳定性之间取得平衡。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Remotion Blog - 在 React 中优雅地管理状态和渲染]]></title>
        <id>https://remotion.com/blog/untangling-state-in-react</id>
        <link href="https://remotion.com/blog/untangling-state-in-react"/>
        <updated>2023-03-13T12:16:19.910Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://remotion.com/blog/untangling-state-in-react">Remotion Blog – Elegantly managing state and renders in React</a></p><p><strong>概要：</strong></p><p>本文介绍了在 React 中简化状态管理的方法。作者指出，React 状态更像是时间快照而不是常规 JavaScript 变量。设置状态只会在下一次渲染时更改它。React 批处理状态更新，并且仅在调用事件处理程序中的所有代码后才进行呈现。文章还介绍了 useState 钩子的作用和使用方法，以及如何通过传递更新程序函数来解决 React 队列状态更改更新的问题。最后，作者建议读者查阅 React 官方文档以了解更多信息。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 React Query 防抖请求]]></title>
        <id>https://rafaelcamargo.com/blog/deboucing-requests-with-react-query/</id>
        <link href="https://rafaelcamargo.com/blog/deboucing-requests-with-react-query/"/>
        <updated>2023-03-13T12:16:06.389Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://rafaelcamargo.com/blog/deboucing-requests-with-react-query/">Debouncing requests with React Query</a></p><p><strong>概要：</strong></p><p>本文介绍了 React Query 库的一些优势，如默认防止对同一资源的同时请求，并能够像传递简单参数一样轻松地缓存响应。然而，该库不提供反弹功能，因此需要将其包装在一个简单的抽象中，以满足这种需求。作者提出了一种方法来扩展 React Query 以添加新功能，代码行数少于 40 行。通过动画演示，展示了反弹的实际效果，使用反弹后，应用程序只触发了 1 个请求并交换了 294 B 的数据，请求减少了 91％，传输的数据减少了 99％。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[主题切换]]></title>
        <id>https://toggles.dev/</id>
        <link href="https://toggles.dev/"/>
        <updated>2023-03-13T12:14:32.521Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://toggles.dev/">Theme Toggles</a></p><p><strong>概要：</strong></p><p>Theme Toggles 是一款易于使用的动画切换集合，旨在切换浅色和深色模式。它是一个模块化库，旨在提供足够的自定义功能。它与 Tailwindcss 等实用 CSS 框架非常配合使用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[零努力类型安全]]></title>
        <id>https://svelte.dev/blog/zero-config-type-safety</id>
        <link href="https://svelte.dev/blog/zero-config-type-safety"/>
        <updated>2023-03-13T12:08:39.558Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://svelte.dev/blog/zero-config-type-safety">Zero-effort type safety</a></p><p><strong>概要：</strong></p><p>SvelteKit 现在可以自动生成类型注释，无需手动添加。通过在 SvelteKit 应用程序中添加类型注释，可以实现网络全面的类型安全性。现在，SvelteKit 框架可以为我们类型化 load 和 data，这是计算机所擅长的 —— 让我们专注于创造性的工作。使用 VSCode 的用户只需升级到最新版本的 Svelte 扩展即可，其他编辑器的扩展也可以使用此功能，只要它们支持 Language Server Protocol 和 TypeScript 插件。此外，该功能还与最新版本的 CLI 诊断工具 svelte-check 兼容。这项功能需要对语言服务器和 TypeScript 插件进行更改，以便在正确的位置自动插入正确的类型，并告诉 TypeScript 使用我们的虚拟增强文件而不是原始未经过类型化的文件。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT-4 将于下周推出，微软德国表示它将是多模态的。]]></title>
        <id>https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html</id>
        <link href="https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html"/>
        <updated>2023-03-10T09:23:26.503Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html">GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany</a></p><p><strong>概要：</strong></p><p>Microsoft Germany has announced that it will introduce GPT-4 next week. The announcement was made during a hybrid information event entitled "AI in Focus - Digital Kickoff". Andreas Braun, CTO Microsoft Germany and Lead Data & AI STU, called LLM a "game changer" because they teach machines to understand natural language. The technology has come so far that it basically "works in all languages". Marianne Janik, CEO of Microsoft Germany, spoke across the board about disruption through AI in companies. Disruption does not necessarily mean job losses. It will take "many experts to make the use of AI value-adding", Janik emphasised. Clemens Sieber, Senior AI Specialist, provided insights into practical AI use and concrete use cases that their teams are currently working on, but also into technical backgrounds.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WTF 是代码提取？]]></title>
        <id>https://www.builder.io/blog/wtf-is-code-extraction</id>
        <link href="https://www.builder.io/blog/wtf-is-code-extraction"/>
        <updated>2023-03-09T09:45:53.821Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.builder.io/blog/wtf-is-code-extraction">WTF Is Code Extraction</a></p><p><strong>概要：</strong></p><p>本文介绍了一种新的开发方式 —— 代码共存（code collocation），即将服务器端和客户端代码放在同一个文件中。作者认为这种方式可以提高开发效率，因为大部分代码都在两个位置上运行，没有必要将它们分开成不同的文件。然而，由于服务器端和客户端有不同的限制，需要将它们分开并创建代码包。文章介绍了三种策略：导出抽取、函数抽取和闭包抽取，并详细解释了如何使用这些策略来实现代码共存。最后，作者还介绍了一种称为 “标记函数” 的方法，可以让开发者自定义标记以及相应的转换过程。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is the most important thing for an engineer to achieve in their growth journey? 

工程师在成长过程中最重要的是什么？]]></title>
        <id>https://chinese.catchen.me/2023/02/engineer-career-growth-endgame.html</id>
        <link href="https://chinese.catchen.me/2023/02/engineer-career-growth-endgame.html"/>
        <updated>2023-03-09T04:58:28.196Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://chinese.catchen.me/2023/02/engineer-career-growth-endgame.html">工程师成长到最后最重要的是什么？</a></p><p><strong>概要：</strong></p><p>本文讨论了工程师成长到最后，最重要的是什么。作者认为，显性知识可以通过书本或其他媒体学习，而隐性知识则是那些难以言述的知识，只能通过找到擅长某一领域的人进行反馈和训练来获得。因此，当工程师成长到一定阶段时，需要搞明白自己需要什么并找到能够提供有效训练的人。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PaLM-E：一种具有身体多模态的语言模型]]></title>
        <id>https://palm-e.github.io/</id>
        <link href="https://palm-e.github.io/"/>
        <updated>2023-03-08T04:25:27.547Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://palm-e.github.io/">PaLM-E: An Embodied Multimodal Language Model</a></p><p><strong>概要：</strong></p><p>本文介绍了一种新的语言模型 ——PaLM-E，它将真实世界的连续传感器模态直接纳入语言模型中，从而建立单词和感知之间的联系。PaLM-E 的输入是交错的多模态句子，包括视觉、连续状态估计和文本输入编码。我们与预训练的大型语言模型一起，对这些编码进行端到端训练，用于多个具体化任务，包括序列机器人操作规划、视觉问答和字幕制作。评估表明，PaLM-E 可以解决各种具体化推理任务，从不同的观察模态、多个具体化形式中获得积极转移，并保留通用语言能力。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么 Turborepo 从 Go 迁移到 Rust - Vercel]]></title>
        <id>https://vercel.com/blog/turborepo-migration-go-rust</id>
        <link href="https://vercel.com/blog/turborepo-migration-go-rust"/>
        <updated>2023-03-08T00:38:52.418Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://vercel.com/blog/turborepo-migration-go-rust">Why Turborepo is migrating from Go to Rust – Vercel</a></p><p><strong>概要：</strong></p><p>Turborepo 是一个用于 JavaScript 和 TypeScript 代码库的高性能构建系统。该系统通过增量构建、并行执行和远程缓存来避免重复工作。随着使用量的增加和产品需求的变化，Turborepo 决定从 Go 逐步迁移到 Rust。该迁移主要基于 Rust 的正确性、强大的生态系统以及开发人员的愉悦度等因素。Turborepo 正在采取渐进式的迁移方式，目前已经实现了 “Rust-Go-Rust Sandwich” 的状态，即 Rust 是入口点，可以选择使用 Rust 或 Go 来实现特定命令的功能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[框架定义的基础设施 - Vercel]]></title>
        <id>https://vercel.com/blog/framework-defined-infrastructure</id>
        <link href="https://vercel.com/blog/framework-defined-infrastructure"/>
        <updated>2023-03-08T00:38:30.242Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://vercel.com/blog/framework-defined-infrastructure">Framework-defined infrastructure – Vercel</a></p><p><strong>概要：</strong></p><p>框架定义的基础设施（FdI）是基础设施即代码（IaC）的演变，它自动提供源自框架和写在其中的应用程序的基础设施。FdI使用构建时的程序来解析写给框架的源代码，理解代码背后的意图，然后生成运行软件所需的IaC配置。这就通过真正的无服务器架构实现了更可预测、成本更低、风险更小的DevOps。FdI对服务器、消息队列和无服务器功能等云基元进行了抽象，使其成为框架概念的单纯实现细节。它提供了不同目标基础设施供应商之间的可移植性，消除了在生产中运行应用程序的基础设施的手动配置需求，并对预先审查的安全服务进行了标准化。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apple: M2 Eaten Dust for Security | Programmer's Cat]]></title>
        <id>https://catcoding.me/p/apple-perf/</id>
        <link href="https://catcoding.me/p/apple-perf/"/>
        <updated>2023-03-07T06:58:22.093Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://catcoding.me/p/apple-perf/">苹果：为了安全让 M2 吃灰 | 程序员的喵</a></p><p><strong>概要：</strong></p><p>该文章介绍了作者在使用苹果 M2 Pro 电脑时发现的一个让人大跌眼镜的设计：系统在运行任何软件之前都会进行校验和检查，以确保其不是恶意软件。这个过程需要通过网络请求与苹果服务器通信，导致性能下降。作者在编译 Rust 编译器项目时发现，相同测试用例的 Linux 虚拟机只需要 1.5 分钟，而 M2 Pro 需要 16 分钟。经过调查，作者发现关闭 System Integrity Protection（SIP）可以显著提高性能，但苹果回应称这是 “设计使然”。</p>]]></content>
    </entry>
</feed>
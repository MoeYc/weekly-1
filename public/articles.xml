<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-04-18T08:13:42.392Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[一个 README 模板 - 带有自动生成的目录・Matthias Ott - 用户体验设计师]]></title>
        <id>https://matthiasott.com/notes/a-readme-template-with-an-automatically-generated-table-of-contents</id>
        <link href="https://matthiasott.com/notes/a-readme-template-with-an-automatically-generated-table-of-contents"/>
        <updated>2023-04-18T08:11:21.420Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://matthiasott.com/notes/a-readme-template-with-an-automatically-generated-table-of-contents">A README Template – With an Automatically Generated Table of Contents · Matthias Ott – User Experience Designer</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了如何在项目中编写 README 文件，作者提供了一个包含重要部分的模板，并且还介绍了一个自动生成目录的工具 DocToc。此外，作者还推荐了一个名为 Readme.so 的编辑器，可以通过拖放和调整文本来创建个性化的 README 文件。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - yoavbls/pretty-ts-errors：🔵 在 VSCode 中使 TypeScript 错误更漂亮和易读 🎀]]></title>
        <id>https://github.com/yoavbls/pretty-ts-errors</id>
        <link href="https://github.com/yoavbls/pretty-ts-errors"/>
        <updated>2023-04-18T07:00:29.280Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/yoavbls/pretty-ts-errors">GitHub - yoavbls/pretty-ts-errors: 🔵 Make TypeScript errors prettier and human-readable in VSCode 🎀</a></p><p><strong>概要：</strong></p><p>这是一个名为“Pretty TypeScript Errors”的Visual Studio Code扩展，旨在让TypeScript错误变得更加美观和易于阅读。当类型的复杂性增加时，TypeScript错误会变得越来越混乱。这个扩展能帮助您更好地理解错误信息。主要功能包括：为错误信息中的类型提供语法高亮，支持深色和浅色主题；在错误信息中的类型旁边提供一个按钮，可以跳转到相关类型声明；提供一个按钮，可以将您导航到typescript.tv，那里有详细的解释，有时还有视频；提供一个按钮，可以将您导航到ts-error-translator，那里可以用简单的英语阅读错误。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ECMAScript 2023 有什么新特性 | pawelgrzybek.com]]></title>
        <id>https://pawelgrzybek.com/whats-new-in-ecmascript-2023/</id>
        <link href="https://pawelgrzybek.com/whats-new-in-ecmascript-2023/"/>
        <updated>2023-04-18T06:01:20.978Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://pawelgrzybek.com/whats-new-in-ecmascript-2023/">What's new in ECMAScript 2023 | pawelgrzybek.com</a></p><p><strong>概要：</strong></p><p>JavaScript 的新功能列表已经确定，最终版本的 ECMAScript 规范预计将于 6 月底发布。这些新功能包括在 Array 和 TypedArray 原型上添加 findLast () 和 findLastIndex () 方法、标准化 Hashbang 语法、允许使用符号作为 WeakMap 键以及在 Array.prototype 上添加返回新副本的方法等。这些功能都已达到第 4 阶段，并预计将包含在即将发布的 ECMAScript 版本中。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[编程游乐场列表]]></title>
        <id>https://jvns.ca/blog/2023/04/17/a-list-of-programming-playgrounds/</id>
        <link href="https://jvns.ca/blog/2023/04/17/a-list-of-programming-playgrounds/"/>
        <updated>2023-04-18T04:54:42.797Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://jvns.ca/blog/2023/04/17/a-list-of-programming-playgrounds/">A list of programming playgrounds</a></p><p><strong>概要：</strong></p><p>本文介绍了一些编程工具，包括编译器、着色器、Arduino/IoT、CSS/HTML/JS、正则表达式、DNS、nginx、varnish、SQLite、SQL、Git、.NET bytecode、Python bytecode、数据格式、编程语言等等。这些工具可以帮助程序员在浏览器中快速测试和调试代码，并提高开发效率。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宣布 LangChainJS 支持多个 JS 环境]]></title>
        <id>https://blog.langchain.dev/js-envs/</id>
        <link href="https://blog.langchain.dev/js-envs/"/>
        <updated>2023-04-18T04:47:37.003Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.langchain.dev/js-envs/">Announcing LangChainJS Support for Multiple JS Environments</a></p><p><strong>概要：</strong></p><p>LangChain.js 宣布支持在浏览器、Cloudflare Workers、Vercel/Next.js、Deno、Supabase Edge Functions 等多个 JavaScript 环境中运行。该库最初只能在 Node.js 上运行，但收到了许多用户的请求，要求在其他环境中使用。为了实现这一目标，开发团队对代码进行了修改，例如将其转换为 ESM 格式，并使用 fetch 替换了 OpenAI 请求。此外，他们还重新设计了第三方集成的暴露方式，以避免不必要的代码加载和打包问题。虽然这些更改可能会导致某些旧代码无法正常工作，但该团队表示他们已经尽力确保兼容性，并欢迎社区贡献者提交更多测试用例。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[负载均衡]]></title>
        <id>https://samwho.dev/load-balancing/</id>
        <link href="https://samwho.dev/load-balancing/"/>
        <updated>2023-04-18T04:47:05.157Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://samwho.dev/load-balancing/">Load Balancing</a></p><p><strong>概要：</strong></p><p>本文讨论了负载均衡算法的不同类型，以及它们在 HTTP 请求分发中的应用。从最简单的 “轮询” 算法开始，到更复杂的 “加权轮询” 和 “最小连接数” 算法，再到结合了动态加权轮询和最小连接数的 “峰值指数加权移动平均” 算法。文章还讨论了优化 HTTP 负载均衡算法的目标是延迟而不是丢失请求，并提供了一些实际模拟数据来支持这些算法的比较和评估。最后，作者还提供了一个交互式的模拟器，可以让读者自己尝试调整参数并观察结果。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SvelteKit 的干净前端架构：前言]]></title>
        <id>https://nikoheikkila.fi/blog/clean-frontend-architecture-with-sveltekit/</id>
        <link href="https://nikoheikkila.fi/blog/clean-frontend-architecture-with-sveltekit/"/>
        <updated>2023-04-18T04:46:27.277Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://nikoheikkila.fi/blog/clean-frontend-architecture-with-sveltekit/">Clean Frontend Architecture with SvelteKit: Preface</a></p><p><strong>概要：</strong></p><p>本文介绍了什么是干净的前端设计和架构，以及如何避免应用程序成为遗留代码。作者提到，干净的设计模式独立于技术决策和外部副作用，因此可以在应用程序框架内或外创建干净的设计。同时，干净的设计也不需要软件工程师拥有数学分析和功能编程的博士学位，只需要编写干净的代码即可。本文还介绍了一些实践指南，包括发现用例、使用网关处理外部依赖、域建模、服务器端路由和组件、验收测试和将站点部署到 Netlify。最后，作者鼓励读者通过阅读完整的代码示例来加深对干净设计和架构的理解，并提供了一个开源的代码库供读者参考。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windi CSS]]></title>
        <id>https://windicss.org/posts/sunsetting.html</id>
        <link href="https://windicss.org/posts/sunsetting.html"/>
        <updated>2023-04-17T00:25:55.750Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://windicss.org/posts/sunsetting.html">Windi CSS</a></p><p><strong>概要：</strong></p><p>Windi CSS 宣布将停止维护。Windi CSS 是一个用于解决 Tailwind 的性能问题的框架，其高效和强大的按需方法激发了 Tailwind 实现他们的 “JIT” 引擎。该项目已经开发出了许多增强开发人员体验的功能，包括 Variant Group、Shortcuts、Attributify Mode 和 Visual Analyzer 等。然而，由于团队成员追求新机会，他们无法再继续积极地开发和维护该项目，因此决定停止维护 Windi CSS。虽然不会添加新功能，但仍会提供安全修复程序。对于新项目，建议考虑 UnoCSS 或 Tailwind CSS 等替代方案。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[故意破坏 React Query 的 API]]></title>
        <id>https://tkdodo.eu/blog/breaking-react-querys-api-on-purpose</id>
        <link href="https://tkdodo.eu/blog/breaking-react-querys-api-on-purpose"/>
        <updated>2023-04-17T00:22:40.984Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://tkdodo.eu/blog/breaking-react-querys-api-on-purpose">Breaking React Query's API on purpose</a></p><p><strong>概要：</strong></p><p>React Query在其即将发布的v5版本中删除了useQuery的回调。做出这个决定是因为回调不一致，可能导致错误，特别是在用于状态同步时。虽然一些用户对失去直观的API表示担忧，但React Query建议使用全局缓存级回调或Query上的元字段来代替。移除回调是一个例子，说明主要的版本跳跃可以用来纠正次优的设计决策。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[到期与长期知识]]></title>
        <id>https://collabfund.com/blog/expiring-vs-lt-knowledge/</id>
        <link href="https://collabfund.com/blog/expiring-vs-lt-knowledge/"/>
        <updated>2023-04-16T14:54:36.131Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://collabfund.com/blog/expiring-vs-lt-knowledge/">Expiring vs. Long-Term Knowledge</a></p><p><strong>概要：</strong></p><p>根据麻省理工学院的捐赠基金，我们所消费的大部分信息的半衰期是以天或月计算的。虽然这种即将到期的知识可以帮助今天的决策，但它没有长期价值。长期的知识，例如了解为什么会发生某事，并且有可能再次发生，更难被注意到，因为它被埋藏在书中，而不是在头条新闻中爆料。然而，它的好处是巨大的，因为它很少过期，并随着时间的推移而复合，这意味着它可以被翻译并与其他主题互动。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[有两种类型的软件工程师]]></title>
        <id>https://registerspill.thorstenball.com/p/two-types-of-software-engineers</id>
        <link href="https://registerspill.thorstenball.com/p/two-types-of-software-engineers"/>
        <updated>2023-04-16T14:53:19.613Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://registerspill.thorstenball.com/p/two-types-of-software-engineers">Two types of software engineers</a></p><p><strong>概要：</strong></p><p>这篇文章探讨了两种软件工程师的思维方式。第一种类型认为问题很容易解决，只需要要求人们做 X 即可。而第二种类型则认为问题很难解决，因为它需要人们去做 X。第一种类型认为只要不是技术问题就很容易解决，因为 “我们可以要求人们做 X”。而第二种类型则认为这很难，因为它不是技术问题。作者称第一种类型的工程师相信大写字母 E 的工程学，认为存在着冷酷、坚实的真理；有数学和物理；是应用科学。而第二种类型的工程师则更注重人，他们知道在所有的工程工作（和问题）中，人是核心所在。他们接受了事情变得混乱的事实，并迎接了一个更大的挑战，尽管这会带来混乱，但仍然要做出有价值和有影响力的工作。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿伦德・范・贝伦（Arend van Beelen jr.）]]></title>
        <id>https://arendjr.nl/2023/04/mvp-the-most-valuable-programmer</id>
        <link href="https://arendjr.nl/2023/04/mvp-the-most-valuable-programmer"/>
        <updated>2023-04-16T14:50:52.717Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://arendjr.nl/2023/04/mvp-the-most-valuable-programmer">Arend van Beelen jr.</a></p><p><strong>概要：</strong></p><p>本文讨论了成为最有价值的程序员（MVP）的概念。与 “最小可行产品” 类似，MVP 并不是一个具体的概念，而是一个追求的目标。这篇文章提供了一些建议，帮助程序员成为更有价值的人，包括不要过度关注代码风格、正确性、DRY 和性能，而是关注业务需求、解决问题以及与同事沟通。此外，作者还提到了保持身心健康的重要性，因为只有这样才能保持高效率和创造力。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[“过度从事工作” 的赚钱者利用 ChatGPT 来接受更多全职工作。]]></title>
        <id>https://www.vice.com/en/article/v7begx/overemployed-hustlers-exploit-chatgpt-to-take-on-even-more-full-time-jobs</id>
        <link href="https://www.vice.com/en/article/v7begx/overemployed-hustlers-exploit-chatgpt-to-take-on-even-more-full-time-jobs"/>
        <updated>2023-04-16T12:06:35.817Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.vice.com/en/article/v7begx/overemployed-hustlers-exploit-chatgpt-to-take-on-even-more-full-time-jobs">‘Overemployed’ Hustlers Exploit ChatGPT To Take On Even More Full-Time Jobs</a></p><p><strong>概要：</strong></p><p>The COVID-19 pandemic has led to a rise in multi-job hustlers who use artificial intelligence (AI) chatbots to automate their work, according to an article by Vice's Motherboard. The overemployed community refers to themselves as the "overemployed" and use AI tools such as OpenAI's ChatGPT to create reports, presentations, and even cover letters for job applications. The article raises concerns about the potential effects of AI on the international job market, but for those using the technology, it has become an opportunity to increase income or ease the burden of holding down multiple jobs. However, members of the overemployed community are aware that what they're doing is frowned upon by corporate leaders and have requested anonymity to avoid losing their jobs.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT 的工作原理：深入探究 | Dan Hollick 🇿🇦]]></title>
        <id>https://typefully.com/DanHollick/yA3ppZC</id>
        <link href="https://typefully.com/DanHollick/yA3ppZC"/>
        <updated>2023-04-14T00:40:29.438Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://typefully.com/DanHollick/yA3ppZC">How ChatGPT works: a deep dive | Dan Hollick 🇿🇦</a></p><p><strong>概要：</strong></p><p>本文介绍了大型语言模型 ChatGPT 的工作原理。这些模型通过计算输入和输出之间的概率来预测下一个单词或符号。为了实现这一点，它们使用神经网络来处理输入并生成输出的概率。在简单的情况下，神经网络由输入层、隐藏层和输出层组成，其中每个神经元都与相邻层中的神经元相连，并具有一个权重。当输入值通过神经元时，它会乘以该神经元的权重，并将结果传递给下一层中的所有神经元。然后，神经元将这些值相加，并将结果压缩到 - 1 到 1 之间，并将其传递给下一层中的每个神经元。最后一个隐藏层的神经元也是如此，但是将值压缩到 0 到 1 之间，并将其传递到输出层。在训练神经网络时，我们提供已知答案的图像，并计算答案和网络计算的概</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在页面退出时显示未保存的表单数据警告。]]></title>
        <id>https://claritydev.net/blog/display-warning-for-unsaved-form-data-on-page-exit</id>
        <link href="https://claritydev.net/blog/display-warning-for-unsaved-form-data-on-page-exit"/>
        <updated>2023-04-14T00:40:07.652Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://claritydev.net/blog/display-warning-for-unsaved-form-data-on-page-exit">Display Warning for Unsaved Form Data on Page Exit</a></p><p><strong>概要：</strong></p><p>本文介绍了如何实现一个 FormPrompt 组件，以提高 Web 应用程序的用户体验。该组件可以在用户尝试离开具有未保存更改的页面时发出警告。作者讨论了使用纯 JavaScript 的 beforeunload 事件处理此类情况，以及使用 React Router v5 中的 Prompt 组件和 React Router v6 中的 useBeforeUnload 和 unstable_useBlocker 钩子的 React 特定解决方案。最后，作者演示了在前一篇文章中稍作修改的多步骤表单示例中如何使用 FormPrompt 组件。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon CodeWhisperer，个人免费使用，现已普遍提供 | Amazon Web Services]]></title>
        <id>https://aws.amazon.com/blogs/aws/amazon-codewhisperer-free-for-individual-use-is-now-generally-available/</id>
        <link href="https://aws.amazon.com/blogs/aws/amazon-codewhisperer-free-for-individual-use-is-now-generally-available/"/>
        <updated>2023-04-14T00:38:09.328Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://aws.amazon.com/blogs/aws/amazon-codewhisperer-free-for-individual-use-is-now-generally-available/">Amazon CodeWhisperer, Free for Individual Use, is Now Generally Available | Amazon Web Services</a></p><p><strong>概要：</strong></p><p>Amazon CodeWhisperer 是一款实时 AI 编码助手，现已正式推出。它可以帮助开发人员快速、安全地编写代码，而无需离开他们的 IDE 进行研究。CodeWhisperer 可以在多个 IDE 中使用，包括 Visual Studio Code、IntelliJ IDEA 等，并支持 Python、Java、JavaScript、TypeScript 和 C# 等多种语言。此外，它还具有筛选可能被认为是有偏见或不公平的代码建议的功能，以及扫描生成和开发人员编写的代码以查找难以检测的漏洞并提供修复建议的安全扫描功能。CodeWhisperer 的个人版免费使用，可通过电子邮件注册。专业版则提供了更多的管理功能和安全扫描限制。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Replit 部署 - 从想法到生产的最快方式]]></title>
        <id>https://blog.replit.com/deployments-launch</id>
        <link href="https://blog.replit.com/deployments-launch"/>
        <updated>2023-04-13T04:39:32.564Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.replit.com/deployments-launch">Replit Deployments - the fastest way from idea → production</a></p><p><strong>概要：</strong></p><p>Replit has launched its Deployments feature, which separates development and production environments to allow users to work on their app without affecting live users. It also enables users to add features and fix bugs and only deploy to users when ready. The feature includes isolated VM resources for improved security and performance, custom domain linking, and control over when apps are released to users. Replit Deployments is built on Google Cloud Platform and offers industry-leading security features such as data encryption in transit and at rest. The company is planning to add more features in the coming weeks and months.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用 LLM 替换我的最好的朋友，训练了 50 万个群聊消息]]></title>
        <id>https://www.izzy.co/blogs/robo-boys.html</id>
        <link href="https://www.izzy.co/blogs/robo-boys.html"/>
        <updated>2023-04-13T04:16:32.348Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.izzy.co/blogs/robo-boys.html">Replacing my best friends with an LLM trained on 500,000 group chat messages</a></p><p><strong>概要：</strong></p><p>作者用一个大型语言模型训练了他和他的好友们在大学时期使用的聊天记录，并通过 Modal 和 Hex 完成了这个项目。作者将原始聊天数据转换成了可供微调的格式，然后使用 LLaMa 进行微调。最终，作者将模型部署到了 Modal 上，并建立了一个类似于 iMessage 的前端界面，使得所有人都可以与 “机器人男孩” 聊天。作者强烈鼓励大家尝试这种无聊但复杂的 AI 项目，因为它是一个入门级别的 AI 项目，可以让你更深入地了解 LLMs 以及如何针对特定场景进行微调。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RFC：`next/third-parties`・vercel/next.js・讨论 #48256]]></title>
        <id>https://github.com/vercel/next.js/discussions/48256</id>
        <link href="https://github.com/vercel/next.js/discussions/48256"/>
        <updated>2023-04-13T00:21:35.665Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/vercel/next.js/discussions/48256">RFC: `next/third-parties` · vercel/next.js · Discussion #48256</a></p><p><strong>概要：</strong></p><p>Next.js 计划推出 next/third-parties 包，以简化开发人员在应用程序中加载流行第三方库的体验。该包将提供预配置的包装器组件，以确保流行的第三方资源能够高效加载，并随着最佳实践的演变而持续高效。为了避免增加 Next.js 的安装 / 包大小，这个包可以单独存在于核心 next 库之外，但仍然在同一个 monorepo 中。此外，Next.js 还将考虑支持其他流行的第三方库，例如 Sentry、DataDog 和 Facebook Pixel。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何快速制作「九宫格」拼图：基于 ImageMagick 和快捷指令的方案 | 少数派会员 π+Prime]]></title>
        <id>https://sspai.com/prime/story/tile-cropping-magick-shortcuts</id>
        <link href="https://sspai.com/prime/story/tile-cropping-magick-shortcuts"/>
        <updated>2023-04-13T00:21:18.160Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://sspai.com/prime/story/tile-cropping-magick-shortcuts">怎样快速制作「九宫格」拼图：基于 ImageMagick 和快捷指令的方案 ｜ 少数派会员  π+Prime</a></p><p><strong>概要：</strong></p><p>本文介绍如何通过 ImageMagick 或快捷指令，简单免费地制作九宫格拼图。九宫格的制作往往需要第三方软件辅助，也是乱收费和侵犯隐私的重灾区。作者推荐基于 ImageMagick 的终端脚本版本；快捷指令版本可以作为 iOS 平台的后备方案。其中，-background 用来指定背景色，可以是颜色名称、HEX 值或 RGB 值等，不指定则默认用白色。-margin 用来指定四周的额外留白，接受的值是相对于原图长边的百分比，不指定则默认不额外留白。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - shadcn/taxonomy：一个使用新路由器、服务器组件和 Next.js 13 中的所有新功能构建的开源应用程序。]]></title>
        <id>https://github.com/shadcn/taxonomy</id>
        <link href="https://github.com/shadcn/taxonomy"/>
        <updated>2023-04-13T00:18:33.348Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/shadcn/taxonomy">GitHub - shadcn/taxonomy: An open source application built using the new router, server components and everything new in Next.js 13.</a></p><p><strong>概要：</strong></p><p>这是一个使用 Next.js 13 和服务器组件构建的开源应用程序，包括身份验证、订阅、API 路由、静态页面等功能。作者正在使用此项目作为实验来测试现代应用程序在 Next.js 13 和服务器组件中的工作方式。该应用程序使用 Radix UI 构建 UI 组件，使用 Prisma ORM 管理数据库，使用 Stripe 实现订阅功能，并使用 Zod 进行验证。目前还存在一些问题，例如 GitHub 身份验证不可用，但作者会继续更新并改进该应用程序。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布 v1.32.0・microsoft/playwright]]></title>
        <id>https://github.com/microsoft/playwright/releases/tag/v1.32.0</id>
        <link href="https://github.com/microsoft/playwright/releases/tag/v1.32.0"/>
        <updated>2023-04-13T00:16:33.115Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/microsoft/playwright/releases/tag/v1.32.0">Release v1.32.0 · microsoft/playwright</a></p><p><strong>概要：</strong></p><p>Playwright v1.32 发布了 UI Mode（预览版），该模式允许您探索、运行和调试测试，并带有内置的观察模式。新的 API 包括页面.routeFromHAR () 和 browserContext.routeFromHAR () 中的选项 option: updateMode 和 option: updateContent，以及 TestInfo.testId 的新属性和 Tracing.startChunk () 方法中的新选项名称。注意：组件测试有一个重大变化，现在 @playwright/experimental-ct-react 仅支持 React 18。此版本还针对以下稳定通道进行了测试：Google Chrome 111 和 Microsoft Edge 111。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 WordPress Playground 和 WebAssembly 在浏览器中构建 WordPress 体验 - Chrome 开发者]]></title>
        <id>https://developer.chrome.com/en/blog/wordpress-playground/</id>
        <link href="https://developer.chrome.com/en/blog/wordpress-playground/"/>
        <updated>2023-04-13T00:06:26.166Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://developer.chrome.com/en/blog/wordpress-playground/">Build in-browser WordPress experiences with WordPress Playground and WebAssembly - Chrome Developers</a></p><p><strong>概要：</strong></p><p>WordPress Playground 是一个完整的 WordPress 技术堆栈，包括 PHP 和数据库，直接在浏览器中运行。用户可以免费使用和定制嵌入在 playground.wordpress.net 上的 WordPress。此外，用户还可以将 WordPress Playground 嵌入到应用程序中，并使用 JavaScript 进行控制。该文章介绍了 WordPress Playground 如何帮助 WordPress 开发人员、它是如何工作的以及它对 WordPress 未来的意义。WordPress Playground 还支持 WebAssembly PHP，这使得用户可以在不安装 WordPress 的情况下使用它。最后，该文章提出了未来可能出现的一些新功能，例如交互式教程、多人编辑会话、分布式 WordPress 等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Replit 赏金：打造和推出 MVP 的最佳场所]]></title>
        <id>https://blog.replit.com/bounties-nat-dev</id>
        <link href="https://blog.replit.com/bounties-nat-dev"/>
        <updated>2023-04-12T04:39:27.047Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.replit.com/bounties-nat-dev">Replit Bounties: The Best Place to Build and Launch MVPs</a></p><p><strong>概要：</strong></p><p>Nat Friedman, former CEO of GitHub, has launched a new project called nat.dev, a playground for developers to test and compare different large language models (LLMs). The project was created through Replit Bounties, a marketplace where anyone can work with software creators from the Replit community. Zain Huda, a software engineer at Meta, was selected as the developer to execute the full vision for the bounty after impressing Friedman with a working prototype of his vision. The website went on to become the most popular LLM-comparison tool in February 2023 and the team had to implement a credit system to mitigate costs. In April 2023, Nat open sourced the code to allow others to build their own playgrounds.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DRY vs SoC，一个艰难的选择 | Swizec Teller]]></title>
        <id>https://swizec.com/blog/dry-vs-soc-a-difficult-choice/</id>
        <link href="https://swizec.com/blog/dry-vs-soc-a-difficult-choice/"/>
        <updated>2023-04-12T04:38:08.724Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://swizec.com/blog/dry-vs-soc-a-difficult-choice/">DRY vs SoC, a difficult choice | Swizec Teller</a></p><p><strong>概要：</strong></p><p>本文探讨了软件工程中两个重要的概念：DRY（不要重复自己）和 SoC（关注点分离）。作者指出，这两个概念并不是针对代码的规则，而是针对概念的规则。在应用这些概念时，需要关注的是业务概念是否相同，如果相同则可以使用 DRY，否则需要进行关注点分离。作者还提供了一些示例来说明如何应用这些概念。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3.4 · Nuxt]]></title>
        <id>https://nuxt.com/blog/v3-4</id>
        <link href="https://nuxt.com/blog/v3-4"/>
        <updated>2023-04-12T04:20:53.077Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://nuxt.com/blog/v3-4">Nuxt 3.4 · Nuxt</a></p><p><strong>概要：</strong></p><p>Nuxt.js, the open-source framework for building Vue.js applications, has released version 3.4, which includes experimental support for Chromium-based browsers' new View Transitions API. This allows native browser transitions between unrelated elements on different pages. The release also features enhanced payload handling, including support for rich JavaScript types such as regular expressions, dates, Map and Set and BigInt, as well as NuxtError and Vue-specific objects like ref, reactive, shallowRef and shallowReactive. Other upgrades include better context transforms, object-syntax Nuxt plugins, and improvements to layers.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - ds300/lazyrepo: 用于 npm/pnpm/yarn monorepos 的缓存任务运行器。]]></title>
        <id>https://github.com/ds300/lazyrepo</id>
        <link href="https://github.com/ds300/lazyrepo"/>
        <updated>2023-04-11T13:28:51.241Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/ds300/lazyrepo">GitHub - ds300/lazyrepo: Caching task runner for npm/pnpm/yarn monorepos.</a></p><p><strong>概要：</strong></p><p>lazyrepo 是一个针对 npm/pnpm/yarn monorepos 的零配置缓存任务运行器。它适合于 turborepo 所开创的领域：使 package.json “scripts” 扩展，而无需采用像 nx、bazel、rush 或 buck 这样的大型工业级构建系统。lazyrepo 非常快速，尽管它是用 TypeScript 编写而不是一些年轻、英俊、聪明、有趣的系统语言，但它比 turborepo 要快得多。除了性能之外，lazyrepo 还带来了一些重要的生活质量改善。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何成为一名 - 10x 工程师]]></title>
        <id>https://taylor.town/-10x</id>
        <link href="https://taylor.town/-10x"/>
        <updated>2023-04-07T04:26:48.406Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://taylor.town/-10x">How to be a -10x Engineer</a></p><p><strong>概要：</strong></p><p>本文指出，虽然 “10 倍工程师” 可能是神话，但确实存在 “-10 倍工程师”。为了成为一名 “-10 倍工程师”，可以采用以下策略：使 10 个工程师的输出无效；尽可能在开发过程中更改需求以避免责任；创建 400 小时的忙碌工作；让团队执行类似于工作的任务；创建毫无意义的仪式等。此外，还可以浪费 400 小时的编译 / 构建时间，编写毫无意义的测试，将 10 个工程师困在技术讨论中等等。文章最后呼吁不要雇佣 “0 倍工程师” 和 “-1 倍工程师”，并且不要阻止 “-1 倍工程师” 被解雇。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[程序员被打断：中断和上下文切换的真正成本]]></title>
        <id>https://contextkeeper.io/blog/the-real-cost-of-an-interruption-and-context-switching/</id>
        <link href="https://contextkeeper.io/blog/the-real-cost-of-an-interruption-and-context-switching/"/>
        <updated>2023-04-07T04:23:25.035Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://contextkeeper.io/blog/the-real-cost-of-an-interruption-and-context-switching/">Programmer Interrupted: The Real Cost of Interruption and Context Switching</a></p><p><strong>概要：</strong></p><p>编程中的中断和上下文切换是直接影响程序员日常生产力的两个最昂贵因素。虽然没有永久避免它们的方法，但有一些有趣的策略可以最小化它们的影响。根据各种科学研究，经过中断后需要至少 10-15 分钟才能重新进入 “区域”（Parnin:10，vanSolingen:98）。基于任务的复杂性和你的精神能量，肯定需要更多的时间。当你有很多未完成的代码时，中断发生时，返回到流状态可能会更具挑战性。在编程人员中，这个概念是众所周知的，但可能只有少数人听说过双钟表匠寓言，它完美地捕捉了所有这些细节，即使对于非程序员来说也是如此。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js 13.3]]></title>
        <id>https://nextjs.org/blog/next-13-3</id>
        <link href="https://nextjs.org/blog/next-13-3"/>
        <updated>2023-04-07T02:03:49.198Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://nextjs.org/blog/next-13-3">Next.js 13.3</a></p><p><strong>概要：</strong></p><p>Next.js 13.3 发布，新增了社区请求的流行功能，包括：基于文件的元数据 API、动态 Open Graph 图像、应用程序路由器的静态导出、并行路由和拦截等。其中，基于文件的元数据 API 可以方便地自定义页面以改善 SEO 和 Web 共享；动态 Open Graph 图像可以使用 JSX、HTML 和 CSS 生成 OG 图像；应用程序路由器的静态导出支持完全静态导出，可避免在客户端加载不必要的 JavaScript 代码，减小捆绑大小并实现更快的页面加载；并行路由和拦截可以同时在同一视图中呈现一个或多个页面，如复杂的仪表板或模态框。</p>]]></content>
    </entry>
</feed>
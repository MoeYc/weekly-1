<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-03-20T13:07:34.972Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[你需要知道平衡！CSS 平衡！| pawelgrzybek.com]]></title>
        <id>https://pawelgrzybek.com/you-need-to-know-the-balance-css-balance/</id>
        <link href="https://pawelgrzybek.com/you-need-to-know-the-balance-css-balance/"/>
        <updated>2023-03-20T13:06:23.086Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://pawelgrzybek.com/you-need-to-know-the-balance-css-balance/">You need to know the balance! CSS balance! | pawelgrzybek.com</a></p><p><strong>概要：</strong></p><p>本文介绍了 CSS Text Module Level 4 的一项新功能 ——text-wrap: balance。该功能可以在多行文本中更好地分配剩余空间，避免出现排版上的问题。然而，由于其算法需要大量资源，目前仅限于文本长度较短的情况下使用。规范草案将此限制设置为 10 行，但当前的 Google Chrome Canary 实现将此功能限制为 4 行。未来，可能不再需要 React Wrap Balancer 等工具。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么我们将 package.json 支持添加到 Deno 中]]></title>
        <id>https://deno.com/blog/package-json-support</id>
        <link href="https://deno.com/blog/package-json-support"/>
        <updated>2023-03-20T04:08:58.299Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://deno.com/blog/package-json-support">Why We Added package.json Support to Deno</a></p><p><strong>概要：</strong></p><p>Deno 最新版本的发布引入了一个重大变化：通过支持 package.json，提供了增强的 Node 和 NPM 兼容性。这一更新引发了关于我们的优先级是否发生了变化的问题，因为 Deno 长期以来一直被视为与 Node 不同的道路开拓者。事实上，在第一个 Deno 演示中，明确提到了 package.json 是一个遗憾。因此，许多用户对此发展感到惊讶。本文将解决这些问题，分享我们不断发展的思想，并概述我们的未来目标。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 useImperativeHandle 进行细调 refs]]></title>
        <id>https://prateeksurana.me/blog/fine-tuning-refs-with-useimperativehandle/</id>
        <link href="https://prateeksurana.me/blog/fine-tuning-refs-with-useimperativehandle/"/>
        <updated>2023-03-20T04:07:57.935Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://prateeksurana.me/blog/fine-tuning-refs-with-useimperativehandle/">Fine-tuning refs with useImperativeHandle</a></p><p><strong>概要：</strong></p><p>本文介绍了在 React 中使用 refs 和 useImperativeHandle 的方法。Refs 是一种用于在组件之间传递数据的机制，可以让你访问 DOM 节点并使用原生 JavaScript DOM API 对其进行操作。useImperativeHandle 允许你自定义要公开的 ref 处理程序，以便只公开子组件的特定方法。然而，需要注意的是，在 React 中，最好不要使用 refs 来实现可以通过 props 实现的命令式行为，因为这违反了 React 的核心原则。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重复自己，做更多的事情，重新书写一切。]]></title>
        <id>https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and</id>
        <link href="https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and"/>
        <updated>2023-03-19T14:25:34.198Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and">Repeat yourself, do more than one thing, and rewrite everything</a></p><p><strong>概要：</strong></p><p>编程中的常见建议 “不要重复自己”（DRY）可能会导致更多问题，而不是解决问题。过于严格地遵循这个原则可能会导致程序员创建一个具有四个布尔标志和一系列行为矩阵的函数，并在更改代码时需要小心地进行导航。将事物分成简单的单元可能会导致笨拙的组合和协调交叉变化的困难。避免重写意味着它们通常被推迟到没有成功的机会。但是，有时候遵循这个建议的最佳方法是做相反的事情：采用特性开关并不断重写代码，将事物汇集在一起以便更容易管理它们之间的协调，并重复自己以避免在一个函数中实现所有内容。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不要使用过时的机器人]]></title>
        <id>https://fvsch.com/stale-bots</id>
        <link href="https://fvsch.com/stale-bots"/>
        <updated>2023-03-19T14:24:50.555Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://fvsch.com/stale-bots">Don’t use stale bots</a></p><p><strong>概要：</strong></p><p>本文讨论了软件项目中的 “过时机器人” 问题。过时机器人是指在一段时间内没有活动的情况下，自动将问题标记为 “已关闭” 的自动化流程。使用过时机器人会导致用户体验变差，因为它们可能会关闭具有很好复现步骤、截图和评论的问题，这会让用户觉得他们的努力不被重视。此外，过时机器人也会导致重复问题增加，因为关闭的问题不会出现在搜索结果中。文章建议替代过时机器人的方法包括：接受大量开放问题、设置问题筛选流程、制定项目管理计划等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[本地 CSS 嵌套已经到达 | pawelgrzybek.com]]></title>
        <id>https://pawelgrzybek.com/native-css-nesting-landed/</id>
        <link href="https://pawelgrzybek.com/native-css-nesting-landed/"/>
        <updated>2023-03-19T13:45:47.967Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://pawelgrzybek.com/native-css-nesting-landed/">Native CSS nesting landed | pawelgrzybek.com</a></p><p><strong>概要：</strong></p><p>本文介绍了原生 CSS 嵌套的语法和用法，并与 Sass 的嵌套规则进行了比较。作者表示，原生 CSS 嵌套的语法应该对于熟悉 Sass 的人来说很容易理解。此外，文章还提到，CSS 嵌套是 CSS Nesting 规范的第一个版本，随着规范的演进，其功能和语法可能会发生变化。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - xenova/transformers.js：在您的浏览器中运行🤗变形金刚！]]></title>
        <id>https://github.com/xenova/transformers.js</id>
        <link href="https://github.com/xenova/transformers.js"/>
        <updated>2023-03-19T09:17:05.588Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/xenova/transformers.js">GitHub - xenova/transformers.js: Run 🤗 Transformers in your browser!</a></p><p><strong>概要：</strong></p><p>Transformers.js 是一个可以在浏览器中运行的🤗 Transformers 库，支持 BERT、ALBERT、DistilBERT、T5、T5v1.1、FLAN-T5、GPT2、BART、CodeGen、Whisper、CLIP、Vision Transformer 和 VisionEncoderDecoder 等模型，可用于各种任务，包括遮蔽语言建模、文本分类、文本到文本生成、翻译、摘要、问答、文本生成、自动语音识别、图像分类、零样本图像分类和图像到文本。用户可以通过 https://xenova.github.io/transformers.js/ 体验 demo。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[介绍 react.dev]]></title>
        <id>https://react.dev/blog/2023/03/16/introducing-react-dev</id>
        <link href="https://react.dev/blog/2023/03/16/introducing-react-dev"/>
        <updated>2023-03-19T08:44:54.669Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://react.dev/blog/2023/03/16/introducing-react-dev">Introducing react.dev</a></p><p><strong>概要：</strong></p><p>React 官方文档网站已经更新，现在的网址是 react.dev。新网站教授使用函数组件和 Hooks 的现代 React，并包括了图表、插图、挑战和 600 多个交互式示例。旧版 React 文档网站已移至 legacy.reactjs.org。新网站分为 “学习 React” 和 “API 参考” 两个主要部分，前者是一个自定进度的课程，后者提供每个 React API 的详细信息和用法示例。新网站还添加了很多沙盒，让用户可以快速玩转 React API、探索想法并检查理解。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - anc95/ChatGPT-CodeReview: 🐥 由 ChatGPT 驱动的代码审查机器人]]></title>
        <id>https://github.com/anc95/ChatGPT-CodeReview</id>
        <link href="https://github.com/anc95/ChatGPT-CodeReview"/>
        <updated>2023-03-19T08:33:11.569Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/anc95/ChatGPT-CodeReview">GitHub - anc95/ChatGPT-CodeReview: 🐥 A code review bot powered by ChatGPT</a></p><p><strong>概要：</strong></p><p>本文介绍了一个名为 CodeReview BOT 的代码审查机器人，它由 ChatGPT 驱动。该机器人可以在创建新的 Pull 请求时自动进行代码审查，并在 PR 时间轴 / 文件更改部分显示审查信息。此外，当您更新拉取请求时，cr 机器人将重新审查更改的文件。使用方法包括安装、配置和使用，同时提供了使用 Github Actions 和自托管两种方式。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[未来保障您的混音应用程序]]></title>
        <id>https://remix.run/blog/future-flags</id>
        <link href="https://remix.run/blog/future-flags"/>
        <updated>2023-03-19T08:02:31.022Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://remix.run/blog/future-flags">Future Proofing Your Remix App</a></p><p><strong>概要：</strong></p><p>Remix, a web development framework, has introduced "Future Flags" to make major version upgrades smoother for users. Future Flags are feature flags for future features that allow developers to opt into breaking changes for the next version individually as they are released in the current version. This means that developers can adopt features incrementally and work out any kinks incrementally before releasing v2. Eventually, deprecation warnings will be added to the v1 releases to nudge users to the new behaviour. Then in v2, the old v1 approach is removed, along with the deprecations and flags, making the flagged behaviour the new default in v2.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[介绍 “安全 npm”，一个 Socket npm 包装器 - Socket]]></title>
        <id>https://socket.dev/blog/introducing-safe-npm</id>
        <link href="https://socket.dev/blog/introducing-safe-npm"/>
        <updated>2023-03-19T07:42:04.069Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://socket.dev/blog/introducing-safe-npm">Introducing "safe npm", a Socket npm Wrapper - Socket</a></p><p><strong>概要：</strong></p><p>Socket 推出了一款名为 “safe npm” 的 CLI 工具，用于保护开发人员在使用 npm install 时免受恶意软件、拼写错误、安装脚本、抗议软件和遥测等方面的影响。该工具透明地包装了 npm 命令，并在安装过程中保护开发人员免受恶意软件、拼写错误、安装脚本、抗议软件、遥测等 11 种问题的影响。当开发人员尝试安装恶意或风险包时，Socket 会暂停安装并告知开发人员相关风险。开发人员可以选择停止安装并保护其计算机，也可以继续并接受风险。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - gajus/turbowatch：Node.js 的极速文件变更检测器和任务编排工具。]]></title>
        <id>https://github.com/gajus/turbowatch/</id>
        <link href="https://github.com/gajus/turbowatch/"/>
        <updated>2023-03-19T07:34:09.828Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/gajus/turbowatch/">GitHub - gajus/turbowatch: Extremely fast file change detector and task orchestrator for Node.js.</a></p><p><strong>概要：</strong></p><p>Turbowatch 是一个用于 Node.js 的极快文件更改检测器和任务编排器。它可用于自动化响应文件更改的任何操作，例如运行（并自动重新启动）长时间运行的进程（如您的 Node.js 应用程序）或构建资产（如 Docker 镜像）。Turbowatch 提供了单个抽象来执行所有文件观察操作，并允许链接任意操作。它还支持日志记录、重试、防抖动、中断工作流、并发工作流等功能。Turbowatch 旨在为具有数十个或数百个相互依赖的构建步骤的单体库或其他复杂工作空间提供更多控制。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JulesBlom.com - React API 地图]]></title>
        <id>https://julesblom.com/writing/map-of-react-api</id>
        <link href="https://julesblom.com/writing/map-of-react-api"/>
        <updated>2023-03-18T10:14:09.488Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://julesblom.com/writing/map-of-react-api">JulesBlom.com - Map of React API</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了一种学习 React API 的方法，即通过将其组织成一个空间地图来帮助理解。作者将 React 的不同部分联系在一起，形成了一个可供探索的结构，并在 “推荐阅读” 部分中添加了一些经过筛选的优质博客文章链接，以便更好地理解 React API。此外，作者还提出了一些未实现的想法，例如将 JSX 语法扩展包括在地图中，以及将 React DevTools、eslint-plugin-react-hooks 和 eslint-plugin-react 等工具添加到地图中。最后，作者感谢所有为 React 文档做出贡献的人和所有撰写收集的文章的作者。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[介绍 Warp AI]]></title>
        <id>https://www.warp.dev/blog/introducing-warp-ai</id>
        <link href="https://www.warp.dev/blog/introducing-warp-ai"/>
        <updated>2023-03-17T02:43:41.376Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.warp.dev/blog/introducing-warp-ai">Introducing Warp AI</a></p><p><strong>概要：</strong></p><p>Warp AI 是一款内置于终端的人工智能，旨在帮助开发人员更高效地工作。用户可以通过向 Warp AI 提问来掌握终端的使用方法，包括解释错误、建议修复方案、编写脚本等。Warp AI 与终端输入和输出的交互方式是其最大优势，它可以将 AI 生成的命令直接运行，而无需复制 / 粘贴或切换上下文。此外，Warp AI 还具有隐私和安全保护措施，只有用户明确输入的内容才会离开本地计算机。目前，Warp AI 已经推出免费试用版，未来将成为付费计划的一部分。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布 v6.9.0・remix-run/react-router]]></title>
        <id>https://github.com/remix-run/react-router/releases/tag/react-router%406.9.0</id>
        <link href="https://github.com/remix-run/react-router/releases/tag/react-router%406.9.0"/>
        <updated>2023-03-16T07:16:32.246Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/remix-run/react-router/releases/tag/react-router%406.9.0">Release v6.9.0 · remix-run/react-router</a></p><p><strong>概要：</strong></p><p>React Router 发布了 6.9.0 版本，支持使用 React 组件定义路由元素和错误元素字段。此外，还引入了 Lazy Route Modules，以保持应用程序包的小巧和支持代码分割路由。此功能通过 lazy () 路由属性实现，是一个异步函数，解析路由定义的非匹配部分。该版本还修复了一些问题，并改进了上下文提供程序的记忆化，以避免不必要的重新渲染。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Execa 7 的无 Shell 脚本 | ITNEXT]]></title>
        <id>https://itnext.io/shell-free-scripts-with-execa-7-885fb3b42f83</id>
        <link href="https://itnext.io/shell-free-scripts-with-execa-7-885fb3b42f83"/>
        <updated>2023-03-16T06:20:44.073Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://itnext.io/shell-free-scripts-with-execa-7-885fb3b42f83">Shell-free scripts with Execa 7 | ITNEXT</a></p><p><strong>概要：</strong></p><p>Google 近期推出了一个名为 zx 的项目，将 shell 脚本和 JavaScript 语言结合起来。这个项目利用 7 年历史的 Node 模块 Execa，使命令和进程易于执行，并提供了类似于 zx 的模式，但采用更简单的纯 JavaScript 方法。使用 Execa，不需要记忆任何 shell 语法，几乎所有特定于 shell 的功能都可以在 JavaScript 中表达。此外，Execa 还具有安全、跨平台和高效等优点。它没有要求任何特殊的二进制文件，也不包含任何实用程序，专注于小型和模块化。除此之外，Execa 还添加了一些额外的选项，如优雅终止、清理、交错输出等，可用于设置单个或多个命令。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[反应性简史]]></title>
        <id>https://www.builder.io/blog/history-of-reactivity</id>
        <link href="https://www.builder.io/blog/history-of-reactivity"/>
        <updated>2023-03-15T15:56:57.155Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.builder.io/blog/history-of-reactivity">A Brief History of Reactivity</a></p><p><strong>概要：</strong></p><p>本文探讨了响应式编程在不同框架中的演变历程。作者分享了自己在使用 Macromedia Flex、AngularJS、React、Knockout、Svelte、RxJS、Vue、MobX 和 SolidJS 等框架时的经验和见解。文章指出，随着框架的发展，人们越来越注重细粒度的响应式系统，以便更好地管理状态和提高性能。作者介绍了 Qwik 框架的特点，该框架将组件序列化为 HTML，从而实现了无缝的客户端渲染和服务器端渲染的切换。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023 年每个前端开发人员都应该知道的 6 个 CSS 片段]]></title>
        <id>https://web.dev/6-css-snippets-every-front-end-developer-should-know-in-2023/</id>
        <link href="https://web.dev/6-css-snippets-every-front-end-developer-should-know-in-2023/"/>
        <updated>2023-03-15T15:34:42.142Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://web.dev/6-css-snippets-every-front-end-developer-should-know-in-2023/">6 CSS snippets every front-end developer should know in 2023</a></p><p><strong>概要：</strong></p><p>本文介绍了六个有用的 CSS 技巧，包括使用容器查询、创建滚动吸附效果、避免使用 grid 的 position: absolute、快速制作圆形、使用层叠样式表（cascade layers）控制变体和使用逻辑属性（logical properties）来减少代码量。其中，容器查询是经过多年等待后在 2023 年终于得到了浏览器支持；滚动吸附可以帮助实现系统滚动 UX，并提供有意义的停止点；使用层叠样式表可以方便地插入新的变体，而不必担心它们会干扰原有的变体；逻辑属性可以根据书写模式和文档方向自动调整样式，从而减少代码量。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt 3.3・Nuxt

努克斯特 3.3・努克斯特]]></title>
        <id>https://nuxt.com/blog/v3-3</id>
        <link href="https://nuxt.com/blog/v3-3"/>
        <updated>2023-03-15T10:13:09.696Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://nuxt.com/blog/v3-3">Nuxt 3.3 · Nuxt</a></p><p><strong>概要：</strong></p><p>Nuxt.js 发布了新版本，增加了本地模块开发、自动重启服务器和性能优化等功能。该版本还提供了一些新的组件和可组合函数，包括错误处理组件 <NuxtClientFallback> 和处理不受信任用户输入的 useHeadSafe 可组合函数。此外，该版本还改进了类型定义和 Nitro 引擎，支持自定义配置模式，并且有更好的 Chrome DevTools 支持。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[模型是什么？定义、类型以及如何创建 ——LogRocket 博客]]></title>
        <id>https://blog.logrocket.com/product-management/mockup-definition-types-how-to-create/</id>
        <link href="https://blog.logrocket.com/product-management/mockup-definition-types-how-to-create/"/>
        <updated>2023-03-15T06:15:12.060Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.logrocket.com/product-management/mockup-definition-types-how-to-create/">What is a mockup? Definition, types, and how to create one - LogRocket Blog</a></p><p><strong>概要：</strong></p><p>本文介绍了在产品管理中使用 Mockup 的最佳实践。Mockup 是产品想法的视觉表现，可以帮助定义、沟通和验证产品愿景，并与管理层、开发团队、跨职能团队甚至客户进行共享。Mockup 包括设计和功能元素，如颜色、字体、信息架构、按钮点击等，提供最基本的框架来帮助您可视化和讨论产品想法或设计。文章还介绍了创建 Mockup 的不同类型和最佳实践，以及持续更新 Mockup 的过程和好处。Mockup 可以提高沟通效率、减少开发成本、改进用户体验等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入探究 TanStack 查询中的突变 - LogRocket 博客]]></title>
        <id>https://blog.logrocket.com/deep-dive-mutations-tanstack-query/</id>
        <link href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/"/>
        <updated>2023-03-15T06:14:19.143Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/">A deep dive into mutations in TanStack Query - LogRocket Blog</a></p><p><strong>概要：</strong></p><p>TanStack Query 是一个用于在 React 应用程序中获取、缓存、同步和更新异步数据的最佳库之一。它非常易于使用，具有零配置，并帮助您解决状态管理问题并控制应用程序的数据，以避免其控制您。 TanStack Query 有三个主要概念：查询、变异和查询失效。本文将重点介绍变异，包括变异的副作用、失效和并行实现。通过使用 useMutation Hook，可以轻松地处理所有更新、创建和删除请求。同时，乐观更新是使用 TanStack Query 变异的关键优势之一。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - nedbat/watchgha：实时显示当前 GitHub 操作运行情况]]></title>
        <id>https://github.com/nedbat/watchgha</id>
        <link href="https://github.com/nedbat/watchgha"/>
        <updated>2023-03-15T04:17:54.551Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/nedbat/watchgha">GitHub - nedbat/watchgha: Live display of current GitHub action runs</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了一个名为 “watch_gha_runs” 的 Python 包，它提供了一个命令，可以监视 GitHub Action 的运行状态。用户只需提供 GitHub 仓库的 URL 和分支名称，即可显示该分支上最新的 GitHub Action 运行状态。如果有任何正在进行的运行，则每秒钟刷新一次以显示当前状态。此外，该命令还提供了丰富的输出信息，包括运行和任务的状态、步骤等。作者表示，该代码目前存在一些问题，需要进一步完善。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[获取用户后，我学到了 4 件事情]]></title>
        <id>https://basementcommunity.bearblog.dev/things-i-learned/</id>
        <link href="https://basementcommunity.bearblog.dev/things-i-learned/"/>
        <updated>2023-03-15T04:17:02.961Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://basementcommunity.bearblog.dev/things-i-learned/">4 things i learned after getting users</a></p><p><strong>概要：</strong></p><p>文章介绍了作者在运营一个以用户生成内容为主的网站时所学到的四件事情。首先，无论你做什么，总会有人滥用你的网站。其次，你需要一个性能监控系统。第三，你需要优化你的 SQL 查询。最后，你需要听取用户的反馈和建议。在文章中，作者分享了他是如何应对这些问题的，并提供了一些解决方案。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在 React 中拖放]]></title>
        <id>https://www.robinwieruch.de/react-drag-and-drop/</id>
        <link href="https://www.robinwieruch.de/react-drag-and-drop/"/>
        <updated>2023-03-14T14:53:16.247Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.robinwieruch.de/react-drag-and-drop/">How to Drag and Drop in React</a></p><p><strong>概要：</strong></p><p>本文是一篇 React 教程，通过实例讲解如何在 React 中使用拖放功能。您将逐步学习如何创建一个 DnD 组件，首先作为垂直列表，然后作为水平列表，并在其中进行大量自定义示例。我们将使用 react-beautiful-dnd 进行此 React 教程。文章介绍了如何使用 useState Hook 初始化状态列表，如何使用 Droppable 和 Draggable 组件以及如何使用 render prop 模式提供更多控制权。最后，您将学习如何将垂直拖放列表转换为水平拖放列表。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[创造一个 “成功之坑”]]></title>
        <id>https://thecuriousleader.work/posts/create-the-pit-of-success/</id>
        <link href="https://thecuriousleader.work/posts/create-the-pit-of-success/"/>
        <updated>2023-03-14T04:30:19.173Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://thecuriousleader.work/posts/create-the-pit-of-success/">Create a "pit of success"</a></p><p><strong>概要：</strong></p><p>本文介绍了一种名为 “三重循环技术领导” 的领导策略，旨在帮助技术领导者创造一个成功不可避免的环境，从而提高信任、内在动机和工作满意度。该策略基于双循环学习和组织和系统原则，并使用广泛接受的教练原则来构建系统性教练技能集。实现这种方法需要通过三个循环（行动、适应和意识）迭代解决团队遇到的问题，并实施最佳解决方案。同时，需要掌握主动倾听、达成明确协议、提出有力问题、推动前进行动和对自己和他人负责等技能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 2.40 的亮点 | GitHub 博客]]></title>
        <id>https://github.blog/2023-03-13-highlights-from-git-2-40/</id>
        <link href="https://github.blog/2023-03-13-highlights-from-git-2-40/"/>
        <updated>2023-03-14T04:19:29.946Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.blog/2023-03-13-highlights-from-git-2-40/">Highlights from Git 2.40 | The GitHub Blog</a></p><p><strong>概要：</strong></p><p>Git 2.40 已发布，来自 88 位贡献者的功能和错误修复中有 30 位是新面孔。该版本增加了一些新特性，如支持 Emacs 的 git jump、支持 --use-mailmap 选项的 git cat-file -s 和 --batch-check 等。此外，该版本还将 git bisect 和 git add --interactive 完全实现为本地内置程序，并对 CI 基础架构进行了一些底层改进。这个版本也标志着 Git 从 Perl 或 Shell 实现的旧部分到更现代的 C 等价物的长期努力的结束。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - pgrok/pgrok：穷人版 ngrok - 通过 SSH 远程端口转发的多租户 HTTP 反向隧道解决方案]]></title>
        <id>https://github.com/pgrok/pgrok</id>
        <link href="https://github.com/pgrok/pgrok"/>
        <updated>2023-03-14T04:17:38.254Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/pgrok/pgrok">GitHub - pgrok/pgrok: Poor man's ngrok - a multi-tenant HTTP reverse tunnel solution through SSH remote port forwarding</a></p><p><strong>概要：</strong></p><p>pgrok 是一个基于 SSH 协议的多租户 HTTP 反向隧道解决方案，旨在为需要将本地开发环境暴露到公共互联网的小团队提供稳定的子域名，并通过 OIDC 协议由 SSO 进行门控。它可以作为 ngrok 企业版的替代品，但不建议将其放在生产系统中使用。pgrok 要求用户拥有自己的域名和 SSO 提供商。对于个人和生产系统，建议购买 ngrok。该项目的目标是为那些不熟悉服务器操作的社区经理、销售和产品经理等人员提供更好的用户体验。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[10 种放慢节奏却能完成任务的方法]]></title>
        <id>https://tinybuddha.com/blog/10-ways-to-slow-down-and-still-get-things-done/</id>
        <link href="https://tinybuddha.com/blog/10-ways-to-slow-down-and-still-get-things-done/"/>
        <updated>2023-03-14T04:11:15.793Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://tinybuddha.com/blog/10-ways-to-slow-down-and-still-get-things-done/">10 Ways to Slow Down and Still Get Things Done</a></p><p><strong>概要：</strong></p><p>这篇文章提出了一些方法，帮助人们在日常生活中放慢节奏。作者认为，即使是工业和数字革命承诺提高生产力，让人们可以少工作、过更平衡的生活，但事实并非如此。随着技术进步，我们比以往任何时候都要工作更长时间，而且具有讽刺意味的是，我们在经济上越来越困难，并且每年都会积累更多的债务。因此，作者建议大家可以自由地选择工作时间，但如果你感到压力大或与当下脱节，可能需要尝试一些方法来放松自己。这些方法包括：缓慢地吃饭、起床后花 15 分钟什么也不做、欣赏美丽的图片、选择一个单一任务等。通过这些小改变，人们可以在不影响生产力的情况下减缓生活的节奏。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一次删除多个 Git 标签]]></title>
        <id>https://rafaelcamargo.com/blog/deleting-multiple-git-tags-at-once/</id>
        <link href="https://rafaelcamargo.com/blog/deleting-multiple-git-tags-at-once/"/>
        <updated>2023-03-14T04:09:31.045Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://rafaelcamargo.com/blog/deleting-multiple-git-tags-at-once/">Deleting multiple Git tags at once</a></p><p><strong>概要：</strong></p><p>本文介绍了如何删除 Git 项目中的多个标签。可以通过传递要删除的标签列表来一次性删除多个标签，也可以使用过滤器列出所有现有标签并按条件删除。如果需要删除所有标签，则可以运行相应的命令。无论是进行本地还是远程清理，上述任何命令都可以几乎立即完成工作，节省宝贵的时间。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[理查德・塔尔斯 | TypeScript 技术面试]]></title>
        <id>https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html</id>
        <link href="https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html"/>
        <updated>2023-03-13T12:20:09.749Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html">Richard Towers | Typescripting the technical interview</a></p><p><strong>概要：</strong></p><p>这篇文章是一篇以 Aphyr 的 Typing the technical interview 为蓝本的技术面试题解析。在这个故事中，主人公接受了一个 N-Queens 编程问题的挑战，并通过 TypeScript 实现了一个解决方案。文章通过描述主人公与面试官 Criss 的对话，展示了如何使用 TypeScript 来解决编程问题。整个过程充满了符号、神秘和幽默感。</p>]]></content>
    </entry>
</feed>